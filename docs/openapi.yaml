openapi: 3.1.0
info:
  title: Cyclefi API Specification
  version: 1.0.0
  description: Dokumentasi API Cyclefi (Bahasa Indonesia)
externalDocs:
  description: Dokumentasi Postman
  url: https://documenter.getpostman.com/view/28800996/2sB3BEmpmo

tags:
  - name: Auth
    description: Dokumentasi seputar autentikasi (registrasi, login, verifikasi email, reset password)
  - name: User
    description: Dokumentasi seputar user (profil, update data)
  - name: Address
    description: Dokumentasi seputar alamat user
  - name: Phone
    description: Dokumentasi seputar nomor kontak user
  - name: Category
    description: Dokumentasi seputar data-data category
  - name: Donation
    description: Dokumentasi seputar fitur donation
  - name: Barter
    description: Dokumentasi seputar fitur barter
  

paths:
  /api/register:
    post:
      summary: Registrasi User Baru (Manual)
      description: |
        Endpoint untuk registrasi user secara manual. User akan menerima email berisi kode OTP untuk verifikasi email.
        - Jika username atau email sudah terdaftar dan sudah diverifikasi, akan ditolak.
        - Jika email sudah terdaftar tapi belum diverifikasi dan username sama, OTP akan dikirim ulang.
        - Jika username sudah terdaftar, akan ditolak.
      tags: [Auth]
      parameters:
        - name: Accept-Language
          in: header
          required: false
          description: Pengaturan bahasa (en, id) dengan callback ke bahasa Inggris.
          schema:
            type: string
            example: en
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: Username unik
                  example: johndoe
                email:
                  type: string
                  format: email
                  description: Email user
                  example: john@example.com
                password:
                  type: string
                  format: password
                  description: Password user
                  example: password123
                confirmPassword:
                  type: string
                  format: password
                  description: Konfirmasi password harus sama dengan password
                  example: password123
              required: [username, email, password, confirmPassword]
      responses:
        "201":
          description: Registrasi berhasil, OTP dikirim ke email user
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: true }
                  message:
                    {
                      type: string,
                      example: "Registration successful. Please check your email for OTP.",
                    }
                  data:
                    type: object
                    properties:
                      id: { type: integer, example: 1 }
                      fullname: { type: string, example: "John Doe" }
                      username: { type: string, example: "johndoe" }
                      email: { type: string, example: "john@example.com" }
                      profile_picture:
                        {
                          type: string,
                          example: "http://.../assets/profiles/johndoe.png",
                        }
        "200":
          description: OTP dikirim ulang ke email user yang belum diverifikasi
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: true }
                  message:
                    {
                      type: string,
                      example: "OTP resent, please check your email",
                    }
                  data:
                    type: object
                    properties:
                      email: { type: string, example: "john@example.com" }
        "400":
          description: Validasi gagal atau data sudah terdaftar
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: false }
                  message: { type: string, example: "Validation failed" }
                  errors:
                    {
                      type: object,
                      example: { email: ["Email sudah terdaftar"] },
                    }

  /api/verify-email:
    post:
      summary: Verifikasi Email User dengan OTP
      description: |
        Endpoint untuk verifikasi email user setelah registrasi menggunakan kode OTP yang dikirim ke email.
      tags: [Auth]
      parameters:
        - name: Accept-Language
          in: header
          required: false
          description: Pengaturan bahasa (en, id) dengan callback ke bahasa Inggris.
          schema:
            type: string
            example: en
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  description: Email user
                  example: john@example.com
                otp:
                  type: string
                  description: Kode OTP yang dikirim ke email
                  example: "1234"
              required: [email, otp]
      responses:
        "200":
          description: Email berhasil diverifikasi
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: true }
                  message:
                    { type: string, example: "Email verification successful." }
                  data:
                    type: object
                    properties:
                      email: { type: string, example: "john@example.com" }
                      verified: { type: boolean, example: true }
        "400":
          description: Kode OTP salah atau sudah expired
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: false }
                  message: { type: string, example: "Invalid or expired OTP" }
                  errors:
                    {
                      type: object,
                      example: { otp: ["OTP salah atau sudah expired"] },
                    }
        "404":
          description: User tidak ditemukan
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: false }
                  message: { type: string, example: "User not found" }

  /api/resend-email-verification-otp:
    post:
      summary: Kirim Ulang OTP Verifikasi Email
      description: |
        Endpoint untuk mengirim ulang OTP ke email user yang belum diverifikasi.
        - Jika email belum terdaftar, akan ditolak.
        - Jika email sudah terverifikasi, akan ditolak.
        - Jika email belum terverifikasi, OTP baru akan dikirim ke email.
      tags: [Auth]
      parameters:
        - name: Accept-Language
          in: header
          required: false
          description: Pengaturan bahasa (en, id) dengan callback ke bahasa Inggris.
          schema:
            type: string
            example: en
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  description: Email user
                  example: john@example.com
              required: [email]
      responses:
        "200":
          description: OTP berhasil dikirim ulang ke email user
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: true }
                  message:
                    {
                      type: string,
                      example: "Resend email verification successfull.",
                    }
                  data:
                    type: object
                    properties:
                      email: { type: string, example: "john@example.com" }
        "400":
          description: Email sudah terverifikasi atau validasi gagal
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: false }
                  message:
                    { type: string, example: "Email sudah terverifikasi" }
                  errors:
                    {
                      type: object,
                      example: { email: ["Email sudah terverifikasi"] },
                    }
        "404":
          description: Email tidak ditemukan
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: false }
                  message: { type: string, example: "Email not found" }

  /api/send-reset-password-otp:
    post:
      summary: Kirim OTP untuk Reset Password
      description: |
        Endpoint untuk mengirim OTP ke email user yang ingin melakukan reset password.
      tags: [Auth]
      parameters:
        - name: Accept-Language
          in: header
          required: false
          description: Pengaturan bahasa (en, id) dengan callback ke bahasa Inggris.
          schema:
            type: string
            example: en
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  description: Email user
                  example: john@example.com
              required: [email]
      responses:
        "200":
          description: OTP berhasil dikirim ke email user
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: true }
                  message: { type: string, example: "OTP sent to email" }
        "404":
          description: Email tidak ditemukan
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: false }
                  message: { type: string, example: "Email not found" }

  /api/reset-password:
    post:
      summary: Reset Password dengan OTP
      description: |
        Endpoint untuk reset password menggunakan OTP yang dikirim ke email.
      tags: [Auth]
      parameters:
        - name: Accept-Language
          in: header
          required: false
          description: Pengaturan bahasa (en, id) dengan callback ke bahasa Inggris.
          schema:
            type: string
            example: en
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  description: Email user
                  example: john@example.com
                otp:
                  type: string
                  description: Kode OTP yang dikirim ke email
                  example: "1234"
                newPassword:
                  type: string
                  format: password
                  description: Password baru
                  example: "newpassword123"
                confirmNewPassword:
                  type: string
                  format: password
                  description: Konfirmasi password baru harus sama dengan password baru
                  example: "newpassword123"
              required: [email, otp, newPassword, confirmNewPassword]
      responses:
        "200":
          description: Password berhasil direset
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: true }
                  message:
                    { type: string, example: "Password reset successful" }
        "400":
          description: OTP salah/expired atau validasi gagal
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: false }
                  message: { type: string, example: "Invalid or expired OTP" }
                  errors:
                    {
                      type: object,
                      example: { otp: ["OTP salah atau sudah expired"] },
                    }
        "404":
          description: Email tidak ditemukan
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: false }
                  message: { type: string, example: "Email not found" }

  /api/users/login:
    post:
      summary: Login manual dengan email/username dan password
      description: |
        Endpoint untuk login manual menggunakan email atau username dan password. Jika berhasil, JWT dikembalikan.
      tags: [Auth]
      parameters:
        - name: Accept-Language
          in: header
          required: false
          description: Pengaturan bahasa (en, id) dengan callback ke bahasa Inggris.
          schema:
            type: string
            example: en
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                identifier:
                  type: string
                  description: Email address atau username
                  example: johndoe
                password:
                  type: string
                  format: password
                  description: Password user
                  example: password123
              required: [identifier, password]
      responses:
        "200":
          description: Login berhasil, JWT dikembalikan
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: true }
                  message: { type: string, example: "Login successful." }
                  data:
                    type: object
                    properties:
                      id: { type: integer, example: 1 }
                      fullname: { type: string, example: "John Doe" }
                      username: { type: string, example: "johndoe" }
                      email: { type: string, example: "john@example.com" }
                      profile_picture:
                        {
                          type: string,
                          example: "http://.../assets/profiles/johndoe.png",
                        }
                  token:
                    {
                      type: string,
                      example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
                    }
        "401":
          description: Kredensial salah
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: false }
                  message: { type: string, example: "Username or password wrong" }
        "403":
          description: Akun tidak aktif atau email belum diverifikasi
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: false }
                  message: { type: string, example: "Account is inactive" }

  /api/auth/google:
    get:
      summary: Redirect ke Google OAuth
      description: |
        Endpoint untuk memulai proses login/register dengan Google OAuth. User akan diarahkan ke halaman login Google.
      tags: [Auth]
      responses:
        "302":
          description: Redirect ke halaman login Google

  /api/auth/google/callback:
    get:
      summary: Callback dari Google OAuth
      description: |
        Endpoint callback setelah user login dengan Google. Jika sukses, user akan otomatis login/register dan menerima JWT.
        - Jika email sudah ada dan belum verifikasi, akun akan diaktifkan.
        - Jika email sudah ada dan sudah verifikasi, user langsung login.
        - Jika email belum ada, user baru akan dibuat.
      tags: [Auth]
      responses:
        "201":
          description: Register/login dengan Google berhasil, JWT dikembalikan
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: true }
                  message:
                    {
                      type: string,
                      example: "Authentication with Google successful",
                    }
                  data:
                    type: object
                    properties:
                      id: { type: integer, example: 1 }
                      fullname: { type: string, example: "John Doe" }
                      username: { type: string, example: "johndoe" }
                      email: { type: string, example: "john@example.com" }
                      profile_picture:
                        {
                          type: string,
                          example: "https://...",
                        }
                  token:
                    {
                      type: string,
                      example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
                    }
        "400":
          description: Validasi gagal atau error lain
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: false }
                  message:
                    { type: string, example: "Google authentication failed" }

  /api/auth/facebook:
    get:
      summary: Redirect ke Facebook OAuth
      description: |
        Endpoint untuk memulai proses login/register dengan Facebook OAuth. User akan diarahkan ke halaman login Facebook.
      tags: [Auth]
      responses:
        "302":
          description: Redirect ke halaman login Facebook

  /api/auth/facebook/callback:
    get:
      summary: Callback dari Facebook OAuth
      description: |
        Endpoint callback setelah user login dengan Facebook. Jika sukses, user akan otomatis login/register dan menerima JWT.
        - Jika email sudah ada dan belum verifikasi, akun akan diaktifkan.
        - Jika email sudah ada dan sudah verifikasi, user langsung login.
        - Jika email belum ada, user baru akan dibuat.
      tags: [Auth]
      responses:
        "201":
          description: Register/login dengan Facebook berhasil, JWT dikembalikan
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: true }
                  message:
                    {
                      type: string,
                      example: "Authentication with Facebook successful",
                    }
                  data:
                    type: object
                    properties:
                      id: { type: integer, example: 1 }
                      fullname: { type: string, example: "John Doe" }
                      username: { type: string, example: "johndoe" }
                      email: { type: string, example: "john@example.com" }
                      profile_picture:
                        {
                          type: string,
                          example: "https://",
                        }
                  token:
                    {
                      type: string,
                      example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
                    }
        "400":
          description: Validasi gagal atau error lain
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: false }
                  message:
                    { type: string, example: "Facebook authentication failed" }

  /api/auth/twitter:
    get:
      summary: Redirect ke Twitter OAuth
      description: |
        Endpoint untuk memulai proses login/register dengan Twitter OAuth. User akan diarahkan ke halaman login Twitter.
      tags: [Auth]
      responses:
        "302":
          description: Redirect ke halaman login Twitter

  /api/auth/twitter/callback:
    get:
      summary: Callback dari Twitter OAuth
      description: |
        Endpoint callback setelah user login dengan Twitter. Jika sukses, user akan otomatis login/register dan menerima JWT.
        - Jika email sudah ada dan belum verifikasi, akun akan diaktifkan.
        - Jika email sudah ada dan sudah verifikasi, user langsung login.
        - Jika email belum ada, user baru akan dibuat.
      tags: [Auth]
      responses:
        "201":
          description: Register/login dengan Twitter berhasil, JWT dikembalikan
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: true }
                  message:
                    {
                      type: string,
                      example: "Authentication with Twitter successful",
                    }
                  data:
                    type: object
                    properties:
                      id: { type: integer, example: 1 }
                      fullname: { type: string, example: "John Doe" }
                      username: { type: string, example: "johndoe" }
                      email: { type: string, example: "john@example.com" }
                      profile_picture:
                        {
                          type: string,
                          example: "https://...",
                        }
                  token:
                    {
                      type: string,
                      example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
                    }
        "400":
          description: Validasi gagal atau error lain
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: false }
                  message:
                    { type: string, example: "Twitter authentication failed" }

  /api/users/current:
    get:
      summary: Mendapatkan data user saat ini
      description: |
        Mengambil data profil user yang sedang login, termasuk relasi phones dan addresses.
      tags: [User]
      parameters:
        - name: Authorization
          in: header
          required: true
          description: Bearer token JWT
          schema:
            type: string
            example: "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        - name: Accept-Language
          in: header
          required: false
          description: Pengaturan bahasa (en, id) dengan callback ke bahasa Inggris.
          schema:
            type: string
            example: en
      responses:
        "200":
          description: Get current user successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: true }
                  message:
                    { type: string, example: "Get current user successful" }
                  data:
                    type: object
                    properties:
                      id: { type: integer, example: 1 }
                      fullname: { type: string, example: "John Doe" }
                      username: { type: string, example: "johndoe" }
                      email: { type: string, example: "john@example.com" }
                      is_email_verified: { type: boolean, example: true }
                      email_verified_at:
                        {
                          type: string,
                          format: date-time,
                          example: "2025-08-12T10:00:00Z",
                        }
                      profile_picture:
                        {
                          type: string,
                          example: "http://.../assets/profiles/johndoe.png",
                        }
                      is_active: { type: boolean, example: true }
                      phones:
                        type: array
                        items:
                          type: object
                          properties:
                            id: { type: integer, example: 1 }
                            number: { type: string, example: "08123456789" }
                      addresses:
                        type: array
                        items:
                          type: object
                          properties:
                            id: { type: integer, example: 1 }
                            address_name: { type: string, example: "Rumah" }
                            address:
                              { type: string, example: "Jl. Mawar No. 1" }
                            latitude: { type: number, example: -6.9 }
                            longitude: { type: number, example: 107.6 }
                            city: {type: string, example: "Unaaha"}
                            state: {type: string, example: "Sulawesi Tenggara"}
                            country: {type: string, example: "Indonesia"}
                            country_code: {type: string, example: "ID"}
                            zipcode: {type: string, example: "93418"}
                            created_at: {type: string, example: "2025-08-14T00:50:59.220Z"}
                            updated_at: {type: string, example: "2025-08-14T00:50:59.220Z"}
        "401":
          description: Unauthorized (token tidak valid/expired)
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Unauthorized. Need Authorization Token"
                  errors:
                    type: object
                    properties:
                      token:
                        type: string
                        example: null

    patch:
      summary: Update data profil user saat ini
      description: |
        Mengupdate data profil user (fullname, username, password). Hanya field yang dikirim yang diupdate.
        Untuk update password, wajib mengirim oldPassword, password baru, dan confirmPassword.
      tags: [User]
      parameters:
        - name: Authorization
          in: header
          required: true
          description: Bearer token JWT
          schema:
            type: string
            example: "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        - name: Accept-Language
          in: header
          required: false
          description: Pengaturan bahasa (en, id) dengan callback ke bahasa Inggris.
          schema:
            type: string
            example: en
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                fullname: { type: string, example: "John Doe" }
                username: { type: string, example: "johndoe" }
                oldPassword:
                  { type: string, format: password, example: "oldpassword123" }
                password:
                  { type: string, format: password, example: "newpassword123" }
                confirmPassword:
                  { type: string, format: password, example: "newpassword123" }
              description: Kirim hanya field yang ingin diupdate. Untuk update password, wajib oldPassword, password, confirmPassword.
      responses:
        "200":
          description: Update current user successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: true }
                  message:
                    { type: string, example: "Update current user successful" }
                  data:
                    type: object
                    example:
                      fullname: "John Doe"
                      username: "johndoe"
        "400":
          description: Validasi gagal atau old password salah
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: false }
                  message: { type: string, example: "Validation failed" }
                  errors:
                    {
                      type: object,
                      example: { oldPassword: ["Old password is incorrect"] },
                    }
        "401":
          description: Unauthorized (token tidak valid/expired)
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Unauthorized. Need Authorization Token"
                  errors:
                    type: object
                    properties:
                      token:
                        type: string
                        example: null

  /api/users/current/profile-picture:
    patch:
      summary: Upload foto profil user saat ini
      description: |
        Mengganti foto profil user yang sedang login. File gambar dikirim sebagai form-data dengan field profile_picture
      tags:
        - User
      parameters:
        - name: Authorization
          in: header
          required: true
          description: Bearer token JWT
          schema:
            type: string
            example: "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        - name: Accept-Language
          in: header
          required: false
          description: Pengaturan bahasa (en, id) dengan callback ke bahasa Inggris.
          schema:
            type: string
            example: en
        - name: Content-Type
          in: header
          required: true
          schema:
            type: string
            example: multipart/form-data
          description: Tipe konten yang dikirim dalam format multipart/form-data karena ada file yang disertakan
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                profile_picture:
                  type: string
                  format: binary
      responses:
        "200":
          description: Foto profil berhasil diupdate
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Update profile picture successful"
                  data:
                    type: object
                    properties:
                      profile_picture:
                        type: string
                        example: "http://.../assets/profiles/user_1_1755334590343.jpg"
        "400":
          description: Validasi gagal atau file tidak ditemukan
          content:
            application/json:
              example:
                success: false
                message: "No file uploaded"
                errors: null
        "401":
          description: Unauthorized (token tidak valid/expired)
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Unauthorized. Need Authorization Token"
                  errors:
                    type: object
                    properties:
                      token:
                        type: string
                        example: null

  /api/users/current/addresses:
    get:
      summary: Mendapatkan daftar alamat user saat ini
      description: |
        Mengambil data alamat user yang sedang login
      tags:
        - Address
      parameters:
        - name: Authorization
          in: header
          required: true
          description: Bearer token JWT
          schema:
            type: string
            example: "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        - name: Accept-Language
          in: header
          required: false
          description: Pengaturan bahasa (en, id) dengan callback ke bahasa Inggris.
          schema:
            type: string
            example: en
        - name: Content-Type
          in: header
          required: true
          schema:
            type: string
            example: application/json
          description: Tipe konten yang dikirim dalam format application/json
      responses:
        "200":
          description: "Berhasil mendapatkan daftar alamat pengguna saat ini"
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Berhasil mendapatkan daftar alamat pengguna saat ini"
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                        address_name:
                          type: string
                          example: "Rumah Utama"
                        address:
                          type: string
                          example: "Jl. Diponegoro No. 1, Bandung, Jawa Barat, Indonesia"
                        latitude:
                          type: number
                          example: -6.90389
                        longitude:
                          type: number
                          example: 107.61861
                        city:
                          type: string
                          example: "Bandung"
                        state:
                          type: string
                          example: "Jawa Barat"
                        country:
                          type: string
                          example: "Indonesia"
                        country_code:
                          type: string
                          example: "ID"
                        zipcode:
                          type: string
                          example: "40115"
        "401":
          description: Unauthorized (token tidak valid/expired)
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Unauthorized. Need Authorization Token"
                  errors:
                    type: object
                    properties:
                      token:
                        type: string
                        example: null
        "404":
          description: Address tidak ditemukan
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: false }
                  message: { type: string, example: "Address not found" }

    post:
      summary: Tambah alamat baru untuk user saat ini
      description: |
        Endpoint untuk menambah alamat baru milik user yang sedang login. 
        Sistem akan otomatis melakukan geocoding untuk mendapatkan latitude, longitude, dan detail lokasi dari field `address` yang diberikan.
      tags:
        - Address
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
          description: JWT token (Bearer)
        - name: Accept-Language
          in: header
          required: false
          schema:
            type: string
          description: Bahasa response (en/id)
        - name: Content-Type
          in: header
          required: true
          schema:
            type: string
            example: application/json
          description: Tipe konten yang dikirim dalam format application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                addressName:
                  type: string
                  maxLength: 255
                  example: "Rumah Utama"
                address:
                  type: string
                  maxLength: 255
                  example: "Jl. Diponegoro No. 1, Bandung"
              required:
                - address
      responses:
        "201":
          description: Alamat berhasil dibuat
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Create address successful."
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      address_name:
                        type: string
                        example: "Rumah Utama"
                      address:
                        type: string
                        example: "Jl. Diponegoro No. 1, Bandung, Jawa Barat, Indonesia"
                      latitude:
                        type: number
                        example: -6.90389
                      longitude:
                        type: number
                        example: 107.61861
                      city:
                        type: string
                        example: "Bandung"
                      state:
                        type: string
                        example: "Jawa Barat"
                      country:
                        type: string
                        example: "Indonesia"
                      country_code:
                        type: string
                        example: "ID"
                      zipcode:
                        type: string
                        example: "40115"
        "400":
          description: Validasi gagal atau geocoding gagal
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Validation failed"
                  errors:
                    type: object
                    example: { "address": ["Field address is required"] }
        "401":
          description: Unauthorized (token tidak valid/expired)
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Unauthorized. Need Authorization Token"
                  errors:
                    type: object
                    properties:
                      token:
                        type: string
                        example: null

  /api/users/current/addresses/{addressId}:
    get:
      summary: Mendapatkan data alamat user saat ini berdasarkan address Id
      description: |
        Mengambil data alamat user yang sedang login
      tags:
        - Address
      parameters:
        - name: Authorization
          in: header
          required: true
          description: Bearer token JWT
          schema:
            type: string
            example: "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        - name: Accept-Language
          in: header
          required: false
          description: Pengaturan bahasa (en, id) dengan callback ke bahasa Inggris.
          schema:
            type: string
            example: en
        - name: Content-Type
          in: header
          required: true
          schema:
            type: string
            example: application/json
          description: Tipe konten yang dikirim dalam format application/json
        - name: addressId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: "Berhasil mendapatkan data alamat pengguna saat ini berdasarkan address Id"
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Berhasil mendapatkan alamat pengguna saat ini berdasarkan ID
                  data:
                    type: object
                    properties:
                      id: { type: integer, example: 1 }
                      address_name: { type: string, example: "Rumah" }
                      address: { type: string, example: "Jl. Mawar No. 1, Unaaha, ..." }
                      latitude: { type: number, example: -6.9 }
                      longitude: { type: number, example: 107.6 }
                      city: {type: string, example: "Unaaha"}
                      state: {type: string, example: "Sulawesi Tenggara"}
                      country: {type: string, example: "Indonesia"}
                      country_code: {type: string, example: "ID"}
                      zipcode: {type: string, example: "93418"}
        "401":
          description: Unauthorized (token tidak valid/expired)
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Unauthorized. Need Authorization Token"
                  errors:
                    type: object
                    properties:
                      token:
                        type: string
                        example: null
        "404":
          description: Address tidak ditemukan
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: false }
                  message: { type: string, example: "Address not found" }
    
    patch:
      summary: Update alamat user saat ini
      description: |
        Mengupdate alamat milik user yang sedang login.
      tags: [Address]
      parameters:
        - name: Authorization
          in: header
          required: true
          description: Bearer token JWT
          schema:
            type: string
            example: "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        - name: Accept-Language
          in: header
          required: false
          description: Pengaturan bahasa (en, id) dengan callback ke bahasa Inggris.
          schema:
            type: string
            example: en
        - name: Content-Type
          in: header
          required: true
          schema:
            type: string
            example: application/json
          description: Tipe konten yang dikirim dalam format application/json
        - name: addressId
          in: path
          required: true
          schema:
            type: integer
          description: ID address yang akan diupdate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                addressName: { type: string, example: "Rumah" }
                address: { type: string, example: "Jl. Mawar No. 1" }
              description: Kirim field yang ingin diupdate. Latitude dan longitude belum otomatis, akan diupdate menggunakan library geocoding di masa depan.
      responses:
        "200":
          description: Update address successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Berhasil memperbarui alamat pengguna saat ini.
                  data:
                    type: object
                    properties:
                      id: { type: integer, example: 1 }
                      address_name: { type: string, example: "Rumah" }
                      address: { type: string, example: "Jl. Mawar No. 1, Unaaha, ..." }
                      latitude: { type: number, example: -6.9 }
                      longitude: { type: number, example: 107.6 }
                      city: {type: string, example: "Unaaha"}
                      state: {type: string, example: "Sulawesi Tenggara"}
                      country: {type: string, example: "Indonesia"}
                      country_code: {type: string, example: "ID"}
                      zipcode: {type: string, example: "93418"}
        "400":
          description: Validasi gagal
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: false }
                  message: { type: string, example: "Validation failed" }
                  errors:
                    {
                      type: object,
                      example: { address: ["Address tidak valid"] },
                    }
        "401":
          description: Unauthorized (token tidak valid/expired)
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Unauthorized. Need Authorization Token"
                  errors:
                    type: object
                    properties:
                      token:
                        type: string
                        example: null
        "404":
          description: Address tidak ditemukan
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: false }
                  message: { type: string, example: "Address not found" }

    delete:
      summary: Menghapus address user saat ini
      description: |
        Menghapus address user yang sedang login saat ini menggunakan request parameter addressId
      tags:
        - Address
      parameters:
        - name: Authorization
          in: header
          required: true
          description: Bearer token JWT
          schema:
            type: string
            example: "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        - name: Accept-Language
          in: header
          required: false
          description: Pengaturan bahasa (en, id) dengan callback ke bahasa Inggris.
          schema:
            type: string
            example: en
        - name: Content-Type
          in: header
          required: true
          schema:
            type: string
            example: application/json
          description: Tipe konten yang dikirim dalam format application/json
        - name: addressId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Berhasil menghapus alamat user
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Berhasil menghapus alamat pengguna berdasarkan ID
                  data: 
                    type: object
                    properties:
                      id: { type: integer, example: 1 }
                      address_name: { type: string, example: "Rumah" }
                      address: { type: string, example: "Jl. Mawar No. 1, Unaaha, ...." }
                      latitude: { type: number, example: -6.9 }
                      longitude: { type: number, example: 107.6 }
                      city: {type: string, example: "Unaaha"}
                      state: {type: string, example: "Sulawesi Tenggara"}
                      country: {type: string, example: "Indonesia"}
                      country_code: {type: string, example: "ID"}
                      zipcode: {type: string, example: "93418"}
        "401":
          description: Unauthorized (token tidak valid/expired)
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Unauthorized. Need Authorization Token"
                  errors:
                    type: object
                    properties:
                      token:
                        type: string
                        example: null
        "404":
          description: Address tidak ditemukan
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: false }
                  message: { type: string, example: "Address not found" }

  /api/users/current/phones:
    get:
      summary: Mendapatkan daftar nomor kontak user saat ini
      description: |
        Mengambil seluruh daftar nomor kontak (phone) milik user yang sedang login.
        - Hanya dapat diakses oleh user yang sudah login (dengan Authorization token).
      tags: [Phone]
      parameters:
        - name: Authorization
          in: header
          required: true
          description: Bearer token JWT
          schema:
            type: string
            example: "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        - name: Accept-Language
          in: header
          required: false
          description: Pengaturan bahasa (en, id) dengan callback ke bahasa Inggris.
          schema:
            type: string
            example: en
        - name: Content-Type
          in: header
          required: true
          schema:
            type: string
            example: application/json
          description: Tipe konten yang dikirim dalam format application/json
      responses:
        "200":
          description: Daftar nomor kontak user berhasil diambil
          content:
            application/json:
              example:
                success: true
                message: Berhasil mendapatkan daftar nomor telepon.
                data:
                  - id: 1
                    number: "08123456789"
                  - id: 2
                    number: "08987654321"
        "401":
          description: Unauthorized (token tidak valid/expired)
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Unauthorized. Need Authorization Token"
                  errors:
                    type: object
                    properties:
                      token:
                        type: string
                        example: null
        "404":
          description: Address tidak ditemukan
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: false }
                  message: { type: string, example: "Address not found" }

    post:
      summary: Tambah nomor kontak baru untuk user saat ini
      description: |
        Menambahkan nomor kontak (phone) baru untuk user yang sedang login.
        - Nomor telepon tidak boleh duplikat untuk user yang sama.
      tags: [Phone]
      parameters:
        - name: Authorization
          in: header
          required: true
          description: Bearer token JWT
          schema:
            type: string
            example: "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        - name: Accept-Language
          in: header
          required: false
          description: Pengaturan bahasa (en, id) dengan callback ke bahasa Inggris.
          schema:
            type: string
            example: en
      requestBody:
        required: true
        content:
          application/json:
            example:
              number: "08123456789"
      responses:
        "201":
          description: Nomor kontak berhasil ditambahkan
          content:
            application/json:
              example:
                success: true
                message: Berhasil membuat nomor telepon.
                data:
                  id: 3
                  number: "08123456789"
                  user_id: 1
        "400":
          description: Validasi gagal atau nomor telepon sudah ada
          content:
            application/json:
              examples:
                validasi:
                  value:
                    success: false
                    message: Validasi gagal
                    errors:
                      number: "Field number wajib diisi"
                duplikat:
                  value:
                    success: false
                    message: Nomor telepon sudah ditambahkan
                    errors: null
        "401":
          description: Unauthorized (token tidak valid/expired)
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Unauthorized. Need Authorization Token"
                  errors:
                    type: object
                    properties:
                      token:
                        type: string
                        example: null

  /api/users/current/phones/{phoneId}:
    get:
      summary: Mendapatkan detail nomor kontak user saat ini berdasarkan phoneId
      description: |
        Mengambil detail nomor kontak (phone) milik user yang sedang login berdasarkan ID.
      tags: [Phone]
      parameters:
        - name: Authorization
          in: header
          required: true
          description: Bearer token JWT
          schema:
            type: string
            example: "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        - name: Accept-Language
          in: header
          required: false
          description: Pengaturan bahasa (en, id) dengan callback ke bahasa Inggris.
          schema:
            type: string
            example: en
        - name: Content-Type
          in: header
          required: true
          schema:
            type: string
            example: application/json
          description: Tipe konten yang dikirim dalam format application/json
        - name: phoneId
          in: path
          required: true
          schema:
            type: integer
          description: ID phone yang akan diambil
      responses:
        "200":
          description: Detail nomor kontak ditemukan
          content:
            application/json:
              example:
                success: true
                message: Berhasil mendapatkan detail nomor telepon.
                data:
                  id: 1
                  number: "08123456789"
                  user_id: 1
        "400":
          description: phoneId bukan angka
          content:
            application/json:
              example:
                success: false
                message: phone id bukan angka
                errors: null
        "401":
          description: Unauthorized (token tidak valid/expired)
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Unauthorized. Need Authorization Token"
                  errors:
                    type: object
                    properties:
                      token:
                        type: string
                        example: null
        "404":
          description: Nomor kontak tidak ditemukan
          content:
            application/json:
              example:
                success: false
                message: Nomor telepon tidak ditemukan
                errors: null
    
    patch:
      summary: Update nomor kontak user saat ini
      description: |
        Mengupdate nomor kontak milik user yang sedang login.
      tags: [Phone]
      parameters:
        - name: Authorization
          in: header
          required: true
          description: Bearer token JWT
          schema:
            type: string
            example: "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        - name: Accept-Language
          in: header
          required: false
          description: Pengaturan bahasa (en, id) dengan callback ke bahasa Inggris.
          schema:
            type: string
            example: en
        - name: Content-Type
          in: header
          required: true
          schema:
            type: string
            example: application/json
          description: Tipe konten yang dikirim dalam format application/json
        - name: phoneId
          in: path
          required: true
          schema:
            type: integer
          description: ID phone yang akan diupdate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                number: { type: string, example: "08123456789" }
              description: Kirim field yang ingin diupdate.
      responses:
        "200":
          description: Update phone successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: true }
                  message:
                    {
                      type: string,
                      example: "Update phone for current user successful",
                    }
                  data:
                    type: object
                    example:
                      number: "08123456789"
        "400":
          description: Validasi gagal
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: false }
                  message: { type: string, example: "Validation failed" }
                  errors:
                    { type: object, example: { number: ["Nomor tidak valid"] } }
        "401":
          description: Unauthorized (token tidak valid/expired)
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Unauthorized. Need Authorization Token"
                  errors:
                    type: object
                    properties:
                      token:
                        type: string
                        example: null
        "404":
          description: Phone tidak ditemukan
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: false }
                  message: { type: string, example: "Phone not found" }
          application/json:
            schema:
              type: object
              properties:
                success:
                  type: boolean
                message:
                  type: string
                data:
                  type: object
                  properties:
                    email:
                      type: string

    delete:
      summary: Menghapus nomor kontak user saat ini
      description: |
        Menghapus nomor kontak (phone) milik user yang sedang login berdasarkan ID.
      tags: [Phone]
      parameters:
        - name: Authorization
          in: header
          required: true
          description: Bearer token JWT
          schema:
            type: string
            example: "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        - name: Accept-Language
          in: header
          required: false
          description: Pengaturan bahasa (en, id) dengan callback ke bahasa Inggris.
          schema:
            type: string
            example: en
        - name: Content-Type
          in: header
          required: true
          schema:
            type: string
            example: application/json
          description: Tipe konten yang dikirim dalam format application/json
        - name: phoneId
          in: path
          required: true
          schema:
            type: integer
          description: ID phone yang akan dihapus
      responses:
        "200":
          description: Nomor kontak berhasil dihapus
          content:
            application/json:
              example:
                success: true
                message: Berhasil menghapus nomor telepon.
                data:
                  id: 1
                  number: "08123456789"
                  user_id: 1
        "400":
          description: phoneId bukan angka
          content:
            application/json:
              example:
                success: false
                message: phone id bukan angka
                errors: null
        "401":
          description: Unauthorized (token tidak valid/expired)
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Unauthorized. Need Authorization Token"
                  errors:
                    type: object
                    properties:
                      token:
                        type: string
                        example: null
        "404":
          description: Nomor kontak tidak ditemukan
          content:
            application/json:
              example:
                success: false
                message: Nomor telepon tidak ditemukan
                errors: null

  /api/categories:
    get:
      summary: Mendapatkan daftar category yang statusnya aktif
      tags:
        - Category
      description: |
        Mengambil semua data category. Dapat dilakukan filter menggunakan query parameter dengan key search yang akan mencari nama kategori yang mengandung value dari search
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
          description: JWT token (Bearer)
        - name: Accept-Language
          in: header
          required: false
          schema:
            type: string
          description: Bahasa response (en/id)
        - name: Content-Type
          in: header
          required: true
          schema:
            type: string
            example: application/json
          description: Tipe konten yang dikirim dalam format application/json
        - name: search
          in: query
          required: false
          schema:
            type: string
          description: Pencarian nama kategori yang mengandung kata search
      responses:
        "200":
          description: Berhasil mendapatkan data category
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Get list of categories successful
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                        name:
                          type: string
                          example: Clothes
                        description:
                          type: string
                          example: Used or new clothes
                        # icon:
                        is_active:
                          type: boolean
                          example: true
        "401":
          description: Unauthorized (token tidak valid/expired)
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Unauthorized. Need Authorization Token"
                  errors:
                    type: object
                    properties:
                      token:
                        type: string
                        example: null
  
  /api/users/current/donations:
    get:
      summary: Mendapatkan daftar donasi (list, filter, pagination) user saat ini
      description: |
        Mengambil daftar donasi milik user yang sedang login saat ini dengan dukungan filter kategori, status, dan pagination.
        - Hanya data yang dibutuhkan UI yang dikembalikan (item_name, images, category, status, last_update, description).
        - Mendukung filter multi-kategori dan multi-status.
        - Mendukung pagination (page, size).
      tags:
        - Donation
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
          description: JWT token (Bearer)
        - name: Accept-Language
          in: header
          required: false
          schema:
            type: string
          description: Bahasa response (en/id)
        - name: Content-Type
          in: header
          required: true
          schema:
            type: string
            example: application/json
          description: Tipe konten yang dikirim dalam format application/json
        - name: search
          in: query
          required: false
          schema: { type: string }
          description: Pencarian pada item name atau description
        - name: page
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Halaman ke berapa (default 1)
        - name: size
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            default: 10
          description: Jumlah data per halaman (default 10)
        - name: category
          in: query
          required: false
          schema:
            type: string
            example: "books,furniture"
          description: "Filter kategori, bisa lebih dari satu id dipisahkan koma (ex: books,furniture,clothes)"
        - name: status
          in: query
          required: false
          schema:
            type: string
            example: "submitted,confirmed"
          description: "Filter status donasi, bisa lebih dari satu status dipisahkan koma **(Value: submitted,confirmed,completed,failed)**"
      responses:
        "200":
          description: Daftar donasi berhasil diambil
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Get donation list successful
                  meta:
                    type: object
                    properties:
                      total:
                        type: integer
                        example: 2
                      page:
                        type: integer
                        example: 1
                      size:
                        type: integer
                        example: 10
                      totalPages:
                        type: integer
                        example: 1
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                        item_name:
                          type: string
                          example: Baju Layak Pakai
                        description:
                          type: string
                          example: Baju bekas, masih bagus, siap pakai.
                        images:
                          type: array
                          items:
                            type: string
                            format: uri
                          example:
                            - https://images.pexels.com/photos/271168/pexels-photo-271168.jpeg?auto=compress&cs=tinysrgb&h=350
                        category:
                          type: object
                          properties:
                            id:
                              type: integer
                              example: 1
                            name:
                              type: string
                              example: Clothes
                        status:
                          type: object
                          properties:
                            id: 
                              type: integer
                              example: 1
                            status:
                              type: string
                              example: "submitted"
                            updated_at:
                              type: date-time
                              example: "2025-08-25T13:46:42.813Z"
              examples:
                success:
                  value:
                    success: true
                    message: Get donation list successful
                    meta:
                      total: 2
                      page: 1
                      size: 10
                      totalPages: 1
                    data:
                      - id: 1
                        item_name: Baju Layak Pakai
                        description: Baju bekas, masih bagus, siap pakai.
                        images:
                          - https://images.pexels.com/photos/271168/pexels-photo-271168.jpeg?auto=compress&cs=tinysrgb&h=350
                        category:
                          id: 1
                          name: Clothes
                        status:
                          id: 1
                          status: submitted
                          updated_at: "2025-08-25T13:46:42.813Z"
                      - id: 2
                        item_name: Buku Pelajaran
                        description: Buku pelajaran SD-SMP, lengkap dan bersih.
                        images:
                          - https://images.pexels.com/photos/4456815/pexels-photo-4456815.jpeg?auto=compress&cs=tinysrgb&h=350
                          - https://images.pexels.com/photos/271168/pexels-photo-271168.jpeg?auto=compress&cs=tinysrgb&h=350
                          - https://images.pexels.com/photos/1350789/pexels-photo-1350789.jpeg?auto=compress&cs=tinysrgb&h=350
                        category:
                          id: 2
                          name: Books
                        status:
                          id: 1
                          status: submitted
                          updated_at: "2025-08-25T13:46:42.813Z"     
        "401":
            description: Unauthorized (token tidak valid/expired)
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    success:
                      type: boolean
                      example: false
                    message:
                      type: string
                      example: "Unauthorized. Need Authorization Token"
                    errors:
                      type: object
                      properties:
                        token:
                          type: string
                          example: null

  /api/users/current/donations/{donationId}:
    get:
      summary: Mendapatkan detail donasi milik user saat ini
      description: |
        Endpoint untuk mendapatkan detail donasi milik user yang sedang login, termasuk informasi barang, kategori, alamat, gambar, dan seluruh riwayat status donasi.
        Hanya user yang berhak (pemilik donasi) yang dapat mengakses endpoint ini.
      tags:
        - Donation
      parameters:
        - name: donationId
          in: path
          required: true
          schema:
            type: integer
          description: ID donasi yang ingin diambil detailnya
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
          description: JWT token (Bearer)
        - name: Accept-Language
          in: header
          required: false
          schema:
            type: string
          description: Bahasa response (en/id)
        - name: Content-Type
          in: header
          required: true
          schema:
            type: string
            example: application/json
          description: Tipe konten yang dikirim dalam format application/json
      responses:
        "200":
          description: Detail donasi berhasil diambil
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Detail donasi berhasil diambil
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 10
                      item_name:
                        type: string
                        example: Sepeda Bekas
                      description:
                        type: string
                        example: Sepeda bekas, masih layak pakai, warna biru.
                      category:
                        type: object
                        properties:
                          id:
                            type: integer
                            example: 1
                          name:
                            type: string
                            example: Sepeda
                      status:
                        type: string
                        example: "submitted"
                      address:
                        type: object
                        properties:
                          id: { type: integer, example: 2 }
                          address: { type: string, example: "Jl. Mawar No. 1 Bandung, Jawa Barat, Indonesia" }
                          latitude: { type: number, example: -6.123 }
                          longitude: { type: number, example: 106.123 }
                      images:
                        type: array
                        items:
                          type: string
                        example:
                          - https://.../donation_1_1692950400000.jpg
                          - https://.../donation_1_1692950401000.jpg
                      status_histories:
                        type: array
                        items:
                          type: object
                          properties:
                            id: { type: integer, example: 1 }
                            status: { type: string, example: submitted }
                            status_detail: { type: string, example: Donasi diajukan }
                            updated_at: { type: string, format: date-time, example: "2025-08-26T10:00:00.000Z" }
        "400":
          description: Parameter donasi id tidak valid
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: false }
                  message: { type: string, example: "Donasi ID bukan angka" }
                  errors: { type: object, example: null }
        "401":
            description: Unauthorized (token tidak valid/expired)
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    success:
                      type: boolean
                      example: false
                    message:
                      type: string
                      example: "Unauthorized. Need Authorization Token"
                    errors:
                      type: object
                      properties:
                        token:
                          type: string
                          example: null
        "404":
          description: Donasi tidak ditemukan atau bukan milik user
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: false }
                  message: { type: string, example: "Donasi tidak ditemukan" }
                  errors: { type: object, example: null }

  /api/donations:
    post:
      tags:
        - Donation
      summary: Membuat donasi baru
      description: |
        Endpoint untuk membuat donasi baru. Hanya user yang sudah login yang dapat mengakses endpoint ini.
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
          description: JWT token (Bearer)
        - name: Accept-Language
          in: header
          required: false
          schema:
            type: string
          description: Bahasa response (en/id)
        - name: Content-Type
          in: header
          required: true
          schema:
            type: string
            example: multipart/form-data
          description: Tipe konten yang dikirim dalam format multipart/form-data karena ada file yang disertakan
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                item_name:
                  type: string
                  maxLength: 255
                  example: Sepeda Bekas
                  description: Nama barang yang didonasikan
                description:
                  type: string
                  maxLength: 255
                  example: Sepeda bekas, masih layak pakai, warna biru.
                  description: Deskripsi barang donasi
                category_id:
                  type: integer
                  example: 1
                  description: ID kategori donasi
                address_id:
                  type: integer
                  example: 2
                  description: ID alamat pengambilan barang
                phone_id:
                  type: integer
                  example: 3
                  description: ID nomor kontak yang bisa dihubungi
                images:
                  type: array
                  items:
                    type: string
                    format: binary
                  # description: Daftar file gambar donasi (maksimal 5 gambar)
              required:
                - item_name
                - description
                - category_id
                - address_id
                - phone_id
                - images
      responses:
        '201':
          description: Donasi berhasil dibuat
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Donasi berhasil dibuat
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 10
                      item_name:
                        type: string
                        example: Sepeda Bekas
                      description:
                        type: string
                        example: Sepeda bekas, masih layak pakai, warna biru.
                      category:
                        type: object
                        properties:
                          id:
                            type: integer
                            example: 1
                          name:
                            type: string
                            example: Sepeda
                      address_id:
                        type: integer
                        example: 2
                      phone_id:
                        type: integer
                        example: 3
                      image:
                        type: array
                        items:
                          type: string
                        example:
                          - https://.../donation_1_1692950400000.jpg
                          - https://.../donation_1_1692950401000.jpg
                      status:
                        type: string
                        example: submitted
        '400':
          description: Validasi gagal atau request tidak sesuai
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Validasi gagal
                  errors:
                    type: object
                    example:
                      item_name:
                        - Field item_name wajib diisi
        "401":
          description: Unauthorized (token tidak valid/expired)
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Unauthorized. Need Authorization Token"
                  errors:
                    type: object
                    properties:
                      token:
                        type: string
                        example: null

  /api/barters:
    get:
      summary: Mendapatkan daftar postingan barter milik user lain (Discover barter)
      description: |
        Endpoint untuk menampilkan daftar postingan barter milik user lain (bukan milik user yang sedang login).
        Mendukung pencarian, filter kategori, filter jarak maksimum, dan sorting.
      tags:
        - Barter
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
          description: JWT token (Bearer)
        - name: Accept-Language
          in: header
          required: false
          schema:
            type: string
          description: Bahasa response (en/id)
        - name: search
          in: query
          required: false
          schema: { type: string }
          description: Pencarian pada item name atau description
        - name: category
          in: query
          required: false
          schema: { type: string, example: "books,furniture" }
          description: Filter berdasarkan kategori
        - name: maxDistance
          in: query
          required: false
          schema: { type: string, example: "2" }
          description: Filter postingan dengan jarak maksimum (km) dari address user
        - name: sortBy
          in: query
          required: false
          schema:
            type: string
            enum: [relevance, nearest, newest]
          description: Urutan hasil (relevance, nearest, newest). Default relevance
        - name: page
          in: query
          required: false
          schema: { type: integer, default: 1 }
        - name: size
          in: query
          required: false
          schema: { type: integer, default: 10 }
      responses:
        "200":
          description: Daftar postingan barter berhasil diambil
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: true }
                  message: { type: string, example: "Get list of barters successful" }
                  meta:
                    type: object
                    properties:
                      total: { type: integer, example: 100 }
                      page: { type: integer, example: 1 }
                      size: { type: integer, example: 10 }
                      totalPages: { type: integer, example: 10 }
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id: { type: integer, example: 10 }
                        item_name: { type: string, example: Buku Komik Naruto }
                        description: { type: string, example: Komik Naruto volume 1-10, kondisi bagus. }
                        category:
                          type: object
                          properties:
                            id: { type: integer, example: 2 }
                            name: { type: string, example: Buku }
                        address:
                          type: object
                          properties:
                            id: { type: integer, example: 3 }
                            address: { type: string, example: "Jl. Mawar No. 1, Kabupaten Bandung, Indonesia" }
                            latitude: { type: number, example: -6.123 }
                            longitude: { type: number, example: 106.123 }
                        distance: { type: number, example: 2.5, description: "Jarak terdekat (km) dari daftar alamat user" }
                        user:
                          type: object
                          properties:
                            id: { type: integer, example: 5 }
                            profile_picture: { type: string, example: "https://.../username.png" }
                            username: { type: string, example: "budi123" }
                            fullname: { type: string, example: "Budi Santoso" }
        "401":
          description: Unauthorized (token tidak valid/expired)
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Unauthorized. Need Authorization Token"
                  errors:
                    type: object
                    properties:
                      token:
                        type: string
                        example: null

    post:
      summary: Membuat postingan barter baru
      description: |
        Endpoint untuk membuat postingan barter. User mengisi data item, kategori, alamat, kontak, dan upload gambar.
        Status awal barter adalah `waiting_for_request`.
      tags:
        - Barter
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
          description: JWT token (Bearer)
        - name: Accept-Language
          in: header
          required: false
          schema:
            type: string
          description: Bahasa response (en/id)
        - name: Content-Type
          in: header
          required: true
          schema:
            type: string
            example: multipart/form-data
          description: Tipe konten yang dikirim dalam format multipart/form-data karena ada file yang disertakan
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                item_name:
                  type: string
                  maxLength: 255
                  example: Buku Komik Naruto
                  description: Nama barang yang ingin dibarterkan
                description:
                  type: string
                  maxLength: 255
                  example: Komik Naruto volume 1-10, kondisi bagus.
                  description: Deskripsi barang barter
                category_id:
                  type: integer
                  example: 2
                  description: ID kategori barang
                address_id:
                  type: integer
                  example: 3
                  description: ID alamat user
                phone_id:
                  type: integer
                  example: 4
                  description: ID nomor kontak user
                images:
                  type: array
                  items:
                    type: string
                    format: binary
                  # description: Daftar file gambar barter (maksimal 5 gambar)
              required:
                - item_name
                - description
                - category_id
                - address_id
                - phone_id
                - images
      responses:
        "201":
          description: Barter berhasil dibuat
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Barter berhasil dibuat
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 10
                      item_name:
                        type: string
                        example: Buku Komik Naruto
                      description:
                        type: string
                        example: Komik Naruto volume 1-10, kondisi bagus.
                      category:
                        type: object
                        properties:
                          id:
                            type: integer
                            example: 2
                          name:
                            type: string
                            example: Buku
                      address_id:
                        type: integer
                        example: 3
                      phone_id:
                        type: integer
                        example: 4
                      images:
                        type: array
                        items:
                          type: string
                        example:
                          - https://api.cyclefi.id/assets/barters/postings/barter_post_1_1692950400000.jpg
                          - https://api.cyclefi.id/assets/barters/postings/barter_post_1_1692950401000.jpg
                      status:
                        type: string
                        example: waiting_for_request
        "400":
          description: Validasi gagal atau request tidak sesuai
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: false }
                  message: { type: string, example: "Validasi gagal" }
                  errors:
                    type: object
                    example:
                      item_name:
                        - Field item_name wajib diisi
        "401":
          description: Unauthorized (token tidak valid/expired)
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Unauthorized. Need Authorization Token"
                  errors:
                    type: object
                    properties:
                      token:
                        type: string
                        example: null

  /api/barters/{barterId}:
    get:
      tags:
        - Barter
      summary: Mendapatkan detail postingan barter user lain
      description: |
        Mengambil detail postingan barter milik user lain berdasarkan barterId. Hanya bisa mengakses postingan barter milik user lain, bukan milik sendiri.
      parameters:
        - name: barterId
          in: path
          required: true
          schema:
            type: integer
          description: ID barter yang ingin diambil detailnya
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
          description: JWT token (Bearer)
        - name: Accept-Language
          in: header
          required: false
          schema:
            type: string
          description: Bahasa response (en/id)
        - name: Content-Type
          in: header
          required: true
          schema:
            type: string
            example: application/json
          description: Tipe konten yang dikirim dalam format application/json
      responses:
        '200':
          description: Berhasil mendapatkan detail barter
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Berhasil mendapatkan detail barter
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      item_name:
                        type: string
                        example: "Tes barter post dewi lestari"
                      description:
                        type: string
                        example: "Tes barter desc"
                      images:
                        type: array
                        items:
                          type: string
                          format: uri
                        example:
                          - "http:/..."
                          - "http:/..."
                      category:
                        type: object
                        nullable: true
                        properties:
                          id:
                            type: integer
                            example: 1
                          name:
                            type: string
                            example: "Clothes"
                      status:
                        type: object
                        nullable: true
                        properties:
                          id:
                            type: integer
                            example: 1
                          status:
                            type: string
                            example: "Request Submitted"
                          updated_at:
                            type: string
                            format: date-time
                            example: "2025-08-28T10:27:14.759Z"
                      user:
                        type: object
                        nullable: true
                        properties:
                          id:
                            type: integer
                            example: 2
                          profile_picture:
                            type: string
                            format: uri
                            example: "https://..."
                          username:
                            type: string
                            example: "dewi.lestari"
                          fullname:
                            type: string
                            example: "Dewi Lestari"
                      address:
                        type: object
                        nullable: true
                        properties:
                          id:
                            type: integer
                            example: 2
                          address:
                            type: string
                            example: "Jalan Sukapura, Sukapura, Dayeuhkolot, Kabupaten Bandung, Jawa Barat, Jawa, 40257, Indonesia"
                          latitude:
                            type: number
                            example: -6.9697397
                          longitude:
                            type: number
                            example: 107.634133
                      distance:
                        type: number
                        nullable: true
                        example: 0.603
                      phone:
                        type: object
                        nullable: true
                        properties:
                          id:
                            type: integer
                            example: 2
                          number:
                            type: string
                            example: "08123456789"
        '400':
          description: barterId tidak valid
        "401":
          description: Unauthorized (token tidak valid/expired)
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Unauthorized. Need Authorization Token"
                  errors:
                    type: object
                    properties:
                      token:
                        type: string
                        example: null
        '404':
          description: Data barter tidak ditemukan

  /api/barters/{barterId}/request:
    post:
      summary: Ajukan Permintaan Barter ke Postingan Barter User lain
      description: |
        Endpoint untuk mengajukan permintaan barter ke postingan barter milik user lain. User dapat memilih menggunakan item barter yang sudah ada (milik sendiri dengan status 'waiting for request' atau 'waiting for confirmation', data dapat diambil dari GET /api/users/current/barters dengan filter status), atau mengisi data item baru beserta upload gambar. 
        - Hanya bisa mengajukan ke postingan barter milik user lain.
        - Tidak boleh mengajukan barter dengan item postingan milik anda yang sama lebih dari satu kali.
        - Jika menggunakan item yang sudah ada, gambar akan otomatis diambil dari item tersebut.
      tags:
        - Barter
      parameters:
        - name: barterId
          in: path
          required: true
          schema:
            type: integer
          description: ID barter yang akan diajukan permintaan barter
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
          description: JWT token (Bearer)
        - name: Accept-Language
          in: header
          required: false
          schema:
            type: string
          description: Bahasa response (en/id)
        - name: Content-Type
          in: header
          required: true
          schema:
            type: string
            example: multipart/form-data
          description: Tipe konten yang dikirim dalam format multipart/form-data karena ada file yang disertakan
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                use_existing_barter_id:
                  type: integer
                  description: ID barter milik sendiri yang ingin digunakan sebagai item barter (opsional, jika ingin pakai item milik user yang sudah ada dengan status 'waiting for request' atau 'waiting for confirmation')
                item_name:
                  type: string
                  maxLength: 255
                  description: Nama item yang ditawarkan **(wajib diisi jika tidak pakai use_existing_barter_id)**
                description:
                  type: string
                  maxLength: 255
                  description: Deskripsi item yang ditawarkan **(wajib diisi jika tidak pakai use_existing_barter_id)**
                category_id:
                  type: integer
                  description: ID kategori item **(wajib diisi jika tidak pakai use_existing_barter_id)**
                address_id:
                  type: integer
                  description: ID alamat user **(wajib diisi jika tidak pakai use_existing_barter_id)**
                phone_id:
                  type: integer
                  description: ID nomor kontak user **(wajib diisi jika tidak pakai use_existing_barter_id)**
                images:
                  type: array
                  items:
                    type: string
                    format: binary
                  description: Upload gambar item barter **(wajib diisi jika tidak pakai use_existing_barter_id)**
      responses:
        "201":
          description: Pengajuan barter berhasil dibuat
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Pengajuan barter berhasil dibuat
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        description: ID barter application
                      barter_id:
                        type: integer
                        description: ID barter yang diajukan
                      item_name:
                        type: string
                        description: Nama item yang ditawarkan
                      description:
                        type: string
                        description: Deskripsi item
                      category_id:
                        type: integer
                        description: ID kategori item
                      address_id:
                        type: integer
                        description: ID alamat user
                      phone_id:
                        type: integer
                        description: ID nomor kontak user
                      images:
                        type: array
                        items:
                          type: string
                          format: uri
                        description: Daftar URL gambar item barter
                      status:
                        type: string
                        example: Request Submitted
                        description: Status aplikasi barter (request_submitted)
        "400":
          description: Request tidak valid (validasi gagal, file tidak diupload, dsb)
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Validasi gagal
                  errors:
                    {
                      type: object,
                      example: { item_name: ["Kolom item_name wajib diisi"] },
                    }
        "401":
          description: Unauthorized (token tidak valid/expired)
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Unauthorized. Need Authorization Token"
                  errors:
                    type: object
                    properties:
                      token:
                        type: string
                        example: null
        "404":
          description: Barter tidak ditemukan, barter milik sendiri, atau barter item milik sendiri tidak ditemukan
        "409":
          description: Duplikasi pengajuan barter dengan postingan milik user (sudah pernah mengajukan barter dengan postingan item yang sama)

  /api/users/current/barters:
    get:
      tags:
        - Barter
      summary: Mendapatkan riwayat barter user (posting & request)
      description: |
        Mengambil daftar barter milik user saat ini (my_items) dan request barter yang masuk ke postingan user (other_items), dengan filter kategori, status, search, dan pagination terpisah.
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
          description: JWT token (Bearer)
        - name: Accept-Language
          in: header
          required: false
          schema:
            type: string
          description: Bahasa response (en/id)
        - name: Content-Type
          in: header
          required: true
          schema:
            type: string
            example: application/json
          description: Tipe konten yang dikirim dalam format application/json
        - name: search
          in: query
          description: Pencarian nama item atau deskripsi (optional)
          required: false
          schema:
            type: string
        - name: category
          in: query
          description: Filter berdasarkan nama kategori (bisa multiple, pisahkan dengan koma, gunakan "all" untuk semua)
          required: false
          schema:
            type: string
            example: elektronik,perabot
        - name: userItemStatus
          in: query
          description: "Filter status barter milik user **(value: waiting_for_request, waiting_for_confirmation, confirmed, completed, failed)**"
          required: false
          schema:
            type: string
            example: waiting_for_request,waiting_for_confirmation
        - name: otherItemStatus
          in: query
          description: "Filter status aplikasi barter yang masuk **(value: request_submitted,confirmed,completed,failed)**"
          required: false
          schema:
            type: string
            example: request_submitted,confirmed
        - name: ownership
          in: query
          description: "Pilih data yang diambil: my_items, other_items, all (pisahkan dengan koma, default: all)"
          required: false
          schema:
            type: string
            example: my_items,other_items
        - name: userItemPage
          in: query
          description: "Halaman data barter milik user (default: 1)"
          required: false
          schema:
            type: integer
            default: 1
        - name: userItemSize
          in: query
          description: "Jumlah data per halaman barter milik user (default: 10)"
          required: false
          schema:
            type: integer
            default: 10
        - name: otherItemPage
          in: query
          description: "Halaman data aplikasi barter yang masuk (default: 1)"
          required: false
          schema:
            type: integer
            default: 1
        - name: otherItemSize
          in: query
          description: "Jumlah data per halaman aplikasi barter yang masuk (default: 10)"
          required: false
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Berhasil mendapatkan riwayat barter user
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Berhasil mendapatkan riwayat barter
                  meta:
                    type: object
                    properties:
                      my_items:
                        type: object
                        properties:
                          total:
                            type: integer
                            example: 12
                          page:
                            type: integer
                            example: 1
                          size:
                            type: integer
                            example: 10
                          totalPages:
                            type: integer
                            example: 2
                      other_items:
                        type: object
                        properties:
                          total:
                            type: integer
                            example: 5
                          page:
                            type: integer
                            example: 1
                          size:
                            type: integer
                            example: 10
                          totalPages:
                            type: integer
                            example: 1
                  data:
                    type: object
                    properties:
                      my_items:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: integer
                            item_name:
                              type: string
                            description:
                              type: string
                            images:
                              type: array
                              items:
                                type: string
                                format: uri
                            category:
                              type: object
                              nullable: true
                              properties:
                                id:
                                  type: integer
                                name:
                                  type: string
                            status:
                              type: object
                              nullable: true
                              properties:
                                id:
                                  type: integer
                                status:
                                  type: string
                                updated_at:
                                  type: string
                                  format: date-time
                      other_items:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: integer
                            item_name:
                              type: string
                            description:
                              type: string
                            images:
                              type: array
                              items:
                                type: string
                                format: uri
                            category:
                              type: object
                              nullable: true
                              properties:
                                id:
                                  type: integer
                                name:
                                  type: string
                            status:
                              type: object
                              nullable: true
                              properties:
                                id:
                                  type: integer
                                status:
                                  type: string
                                updated_at:
                                  type: string
                                  format: date-time
                            user:
                              type: object
                              nullable: true
                              properties:
                                id:
                                  type: integer
                                profile_picture:
                                  type: string
                                  format: uri
                                username:
                                  type: string
                                fullname:
                                  type: string
                            address:
                              type: object
                              nullable: true
                              properties:
                                id:
                                  type: integer
                                address:
                                  type: string
                                latitude:
                                  type: number
                                longitude:
                                  type: number
                            distance:
                              type: number
                              nullable: true
        "401":
          description: Unauthorized (token tidak valid/expired)
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Unauthorized. Need Authorization Token"
                  errors:
                    type: object
                    properties:
                      token:
                        type: string
                        example: null
        
  /api/users/current/barters/{barterId}:
    get:
      tags:
        - Barter
      summary: Mendapatkan detail postingan barter milik user sendiri (my_items) beserta incoming request
      description: |
        Mengambil detail postingan barter milik user saat ini berdasarkan barterId, beserta daftar incoming_request dari user lain.
      parameters:
        - name: barterId
          in: path
          required: true
          description: ID barter milik user login
          schema:
            type: integer
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
          description: JWT token (Bearer)
        - name: Accept-Language
          in: header
          required: false
          schema:
            type: string
          description: Bahasa response (en/id)
        - name: Content-Type
          in: header
          required: true
          schema:
            type: string
            example: application/json
          description: Tipe konten yang dikirim dalam format application/json
      responses:
        '200':
          description: Berhasil mendapatkan detail barter milik user sendiri
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Berhasil mendapatkan detail barter
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 10
                      item_name:
                        type: string
                        example: "Sepeda Bekas"
                      description:
                        type: string
                        example: "Sepeda bekas, masih layak pakai, warna biru."
                      category:
                        type: object
                        properties:
                          id:
                            type: integer
                            example: 1
                          name:
                            type: string
                            example: "Sepeda"
                      status:
                        type: string
                        example: "waiting_for_confirmation"
                      address:
                        type: object
                        properties:
                          id:
                            type: integer
                            example: 2
                          address:
                            type: string
                            example: "Jl. Mawar No. 1 Bandung, Jawa Barat, Indonesia"
                          latitude:
                            type: number
                            example: -6.123
                          longitude:
                            type: number
                            example: 106.123
                      images:
                        type: array
                        items:
                          type: string
                          format: uri
                        example:
                          - "https://..."
                          - "https://..."
                      status_histories:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: integer
                              example: 1
                            status:
                              type: string
                              example: "waiting_for_request"
                            status_detail:
                              type: string
                              example: "Menunggu permintaan barter"
                            updated_at:
                              type: string
                              format: date-time
                              example: "2025-08-26T10:00:00.000Z"
                      incoming_request:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: integer
                            item_name:
                              type: string
                            description:
                              type: string
                            images:
                              type: array
                              items:
                                type: string
                                format: uri
                            category:
                              type: object
                              nullable: true
                              properties:
                                id:
                                  type: integer
                                name:
                                  type: string
                            status:
                              type: object
                              nullable: true
                              properties:
                                id:
                                  type: integer
                                status:
                                  type: string
                                updated_at:
                                  type: string
                                  format: date-time
                            user:
                              type: object
                              nullable: true
                              properties:
                                id:
                                  type: integer
                                profile_picture:
                                  type: string
                                  format: uri
                                username:
                                  type: string
                                fullname:
                                  type: string
                            address:
                              type: object
                              nullable: true
                              properties:
                                id:
                                  type: integer
                                address:
                                  type: string
                                latitude:
                                  type: number
                                longitude:
                                  type: number
                            distance:
                              type: number
                              nullable: true
        '400':
          description: barterId tidak valid
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Barter ID bukan angka
                  errors:
                    type: object
                    properties:
                      token:
                        type: string
                        example: null
        "401":
          description: Unauthorized (token tidak valid/expired)
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Unauthorized. Need Authorization Token"
                  errors:
                    type: object
                    properties:
                      token:
                        type: string
                        example: null
        '404':
          description: Barter tidak ditemukan
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Barter tidak ditemukan
                  errors:
                    type: object
                    properties:
                      token:
                        type: string
                        example: null

  /api/users/current/barter-requests/{requestId}:
    get:
      tags:
        - Barter
      summary: Mendapatkan detail incoming request (other_items) milik user login
      description: |
        Mengambil detail barter application (incoming request) milik user login, beserta data barter yang diajukan (barter_with).
      parameters:
        - name: requestId
          in: path
          required: true
          schema: { type: integer }
          description: ID barter application (other_items)
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
          description: JWT token (Bearer)
        - name: Accept-Language
          in: header
          required: false
          schema:
            type: string
          description: Bahasa response (en/id)
        - name: Content-Type
          in: header
          required: true
          schema:
            type: string
            example: application/json
          description: Tipe konten yang dikirim dalam format application/json
      responses:
        '200':
          description: Berhasil mendapatkan detail incoming request
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Berhasil mendapatkan detail incoming request
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                      item_name:
                        type: string
                      description:
                        type: string
                      images:
                        type: array
                        items:
                          type: string
                          format: uri
                      category:
                        type: object
                        properties:
                          id:
                            type: integer
                          name:
                            type: string
                      status:
                        type: string
                      status_histories:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: integer
                            status:
                              type: string
                            status_detail:
                              type: string
                            updated_at:
                              type: string
                              format: date-time
                      address:
                        type: object
                        properties:
                          id:
                            type: integer
                          address:
                            type: string
                          latitude:
                            type: number
                          longitude:
                            type: number
                      distance:
                        type: number
                      user:
                        type: object
                        properties:
                          id:
                            type: integer
                          profile_picture:
                            type: string
                            format: uri
                          username:
                            type: string
                          fullname:
                            type: string
                      barter_with:
                        type: object
                        properties:
                          id:
                            type: integer
                          item_name:
                            type: string
                          description:
                            type: string
                          images:
                            type: array
                            items:
                              type: string
                              format: uri
                          category:
                            type: object
                            properties:
                              id:
                                type: integer
                              name:
                                type: string
                          status:
                            type: object
                            properties:
                              id:
                                type: integer
                              status:
                                type: string
                              updated_at:
                                type: string
                                format: date-time
        '400':
          description: requestId tidak valid
        '401':
          description: Unauthorized
        '403':
          description: Forbidden (bukan milik user login)
        '404':
          description: Data tidak ditemukan
        '500':
          description: Internal server error
    
  /api/users/current/barters/{barterId}/mark-as-completed:
    post:
      tags:
        - Barter
      summary: Tandai barter sebagai selesai (mark as completed)
      description: |
        Hanya dapat dilakukan oleh pemilik barterId jika status barter sudah confirmed.
        Akan mengubah status barter dan barter request terkait menjadi completed.
      parameters:
        - name: barterId
          in: path
          required: true
          schema: { type: integer }
          description: ID barter milik user login
        - name: requestId
          in: path
          required: true
          schema: { type: integer }
          description: ID barter request yang sudah di-accept
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
          description: JWT token (Bearer)
        - name: Accept-Language
          in: header
          required: false
          schema:
            type: string
          description: Bahasa response (en/id)
        - name: Content-Type
          in: header
          required: true
          schema:
            type: string
            example: application/json
      responses:
        '200':
          description: Berhasil menandai barter sebagai selesai
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Barter marked as completed successfully
        '400':
          description: Barter belum dikonfirmasi atau request belum dikonfirmasi
        '401':
          description: Unauthorized
        '404':
          description: Data tidak ditemukan

  /api/users/current/barters/{barterId}/requests/{requestId}:
    get:
      tags:
        - Barter
      summary: Mendapatkan detail incoming request user lain pada postingan barter milik user sendiri
      description: |
        Mengambil detail request barter (incoming request) dari user lain pada postingan barter milik user yang sedang login, beserta detail item barter milik user pada field barter_with.
      parameters:
        - name: barterId
          in: path
          required: true
          description: ID barter milik user login
          schema:
            type: integer
        - name: requestId
          in: path
          required: true
          description: ID barter request yang ingin diambil detailnya
          schema:
            type: integer
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
          description: JWT token (Bearer)
        - name: Accept-Language
          in: header
          required: false
          schema:
            type: string
          description: Bahasa response (en/id)
      responses:
        '200':
          description: Berhasil mendapatkan detail incoming request
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Berhasil mendapatkan detail request barter yang masuk
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                      item_name:
                        type: string
                      description:
                        type: string
                      images:
                        type: array
                        items:
                          type: string
                          format: uri
                      category:
                        type: object
                        nullable: true
                        properties:
                          id:
                            type: integer
                          name:
                            type: string
                      status:
                        type: object
                        nullable: true
                        properties:
                          id:
                            type: integer
                          status:
                            type: string
                          updated_at:
                            type: string
                            format: date-time
                      user:
                        type: object
                        nullable: true
                        properties:
                          id:
                            type: integer
                          profile_picture:
                            type: string
                            format: uri
                            example: "http://..."
                          username:
                            type: string
                          fullname:
                            type: string
                      address:
                        type: object
                        nullable: true
                        properties:
                          id:
                            type: integer
                          address:
                            type: string
                          latitude:
                            type: number
                          longitude:
                            type: number
                      distance:
                        type: number
                        nullable: true
                      barter_with:
                        type: object
                        properties:
                          id:
                            type: integer
                          item_name:
                            type: string
                          description:
                            type: string
                          images:
                            type: array
                            items:
                              type: string
                              format: uri
                              example: "http://..."
                          category:
                            type: object
                            nullable: true
                            properties:
                              id:
                                type: integer
                              name:
                                type: string
                              status:
                                type: string
                          status_histories:
                            type: array
                            items:
                              type: object
                              properties:
                                id:
                                  type: integer
                                status:
                                  type: string
                                status_detail:
                                  type: string
                                updated_at:
                                  type: string
                                  format: date-time
        '400':
          description: barterId atau requestId tidak valid
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Barter ID bukan angka || Request ID bukan angka
                  errors:
                    type: object
                    properties:
                      token:
                        type: string
                        example: null
        "401":
          description: Unauthorized (token tidak valid/expired)
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Unauthorized. Need Authorization Token"
                  errors:
                    type: object
                    properties:
                      token:
                        type: string
                        example: null
        '404':
          description: Data tidak ditemukan
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Barter tidak ditemukan || Request tidak ditemukan
                  errors:
                    type: object
                    properties:
                      token:
                        type: string
                        example: null

  /api/users/current/barters/{barterId}/requests/{requestId}/process:
    post:
      tags:
        - Barter
      summary: Proses (accept/decline) incoming request pada postingan barter milik user
      description: |
        Accept akan mengubah status requestId menjadi confirmed dan semua request lain pada barterId yang sama menjadi failed.
        Decline akan mengubah status requestId menjadi failed dengan alasan yang diisi user.
        Aksi ini dapat diproses hanya jika status barterId adalah waiting_for_confirmation & status requestId adalah request_submitted
      parameters:
        - name: barterId
          in: path
          required: true
          schema:
            type: integer
          description: ID barter milik user login
        - name: requestId
          in: path
          required: true
          schema:
            type: integer
          description: ID barter request yang ingin diproses
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
          description: JWT token (Bearer)
        - name: Accept-Language
          in: header
          required: false
          schema:
            type: string
          description: Bahasa response (en/id)
        - name: Content-Type
          in: header
          required: true
          schema:
            type: string
            example: application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                action:
                  type: string
                  enum: [accept, decline]
                  description: Pilihan aksi, "accept" untuk menerima, "decline" untuk menolak
                decline_reason:
                  type: string
                  nullable: true
                  description: Alasan penolakan, wajib jika action=decline
              required:
                - action
            examples:
              accept:
                summary: Accept request
                value:
                  action: accept
              decline:
                summary: Decline request
                value:
                  action: decline
                  decline_reason: "Maaf, barang sudah tidak tersedia"
      responses:
        '200':
          description: Berhasil memproses request
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Barter request accepted successfully
        '400':
          description: Bad request (action tidak valid atau alasan decline kosong)
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Nilai action harus accept atau decline
                  errors:
                    type: object
                    nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Unauthorized. Need Authorization Token
                  errors:
                    type: object
                    nullable: true
        '404':
          description: Data tidak ditemukan
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Barter not found
                  errors:
                    type: object
                    nullable: true

  


