openapi: 3.1.0
info:
  title: Cyclefi API Specification
  version: 1.0.0
  description: Dokumentasi API Cyclefi (Bahasa Indonesia)
externalDocs:
  description: Dokumentasi Postman
  url: https://documenter.getpostman.com/view/28800996/2sB3BEmpmo

tags:
  - name: Auth
    description: Dokumentasi seputar autentikasi (registrasi, login, verifikasi email, reset password)
  - name: User
    description: Dokumentasi seputar user (profil, update data)
  - name: Address
    description: Dokumentasi seputar alamat user
  - name: Phone
    description: Dokumentasi seputar nomor kontak user

paths:
  /api/register:
    post:
      summary: Registrasi User Baru (Manual)
      description: |
        Endpoint untuk registrasi user secara manual. User akan menerima email berisi kode OTP untuk verifikasi email.
        - Jika username atau email sudah terdaftar dan sudah diverifikasi, akan ditolak.
        - Jika email sudah terdaftar tapi belum diverifikasi dan username sama, OTP akan dikirim ulang.
        - Jika username sudah terdaftar, akan ditolak.
      tags: [Auth]
      parameters:
        - name: Accept-Language
          in: header
          required: false
          description: Pengaturan bahasa (en, id) dengan callback ke bahasa Inggris.
          schema:
            type: string
            example: en
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: Username unik
                  example: johndoe
                email:
                  type: string
                  format: email
                  description: Email user
                  example: john@example.com
                password:
                  type: string
                  format: password
                  description: Password user
                  example: password123
                confirmPassword:
                  type: string
                  format: password
                  description: Konfirmasi password harus sama dengan password
                  example: password123
              required: [username, email, password, confirmPassword]
      responses:
        "201":
          description: Registrasi berhasil, OTP dikirim ke email user
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: true }
                  message:
                    {
                      type: string,
                      example: "Registration successful. Please check your email for OTP.",
                    }
                  data:
                    type: object
                    properties:
                      id: { type: integer, example: 1 }
                      fullname: { type: string, example: "John Doe" }
                      username: { type: string, example: "johndoe" }
                      email: { type: string, example: "john@example.com" }
                      profile_picture:
                        {
                          type: string,
                          example: "http://.../assets/profiles/johndoe.png",
                        }
        "200":
          description: OTP dikirim ulang ke email user yang belum diverifikasi
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: true }
                  message:
                    {
                      type: string,
                      example: "OTP resent, please check your email",
                    }
                  data:
                    type: object
                    properties:
                      email: { type: string, example: "john@example.com" }
        "400":
          description: Validasi gagal atau data sudah terdaftar
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: false }
                  message: { type: string, example: "Validation failed" }
                  errors:
                    {
                      type: object,
                      example: { email: ["Email sudah terdaftar"] },
                    }

  /api/verify-email:
    post:
      summary: Verifikasi Email User dengan OTP
      description: |
        Endpoint untuk verifikasi email user setelah registrasi menggunakan kode OTP yang dikirim ke email.
      tags: [Auth]
      parameters:
        - name: Accept-Language
          in: header
          required: false
          description: Pengaturan bahasa (en, id) dengan callback ke bahasa Inggris.
          schema:
            type: string
            example: en
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  description: Email user
                  example: john@example.com
                otp:
                  type: string
                  description: Kode OTP yang dikirim ke email
                  example: "1234"
              required: [email, otp]
      responses:
        "200":
          description: Email berhasil diverifikasi
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: true }
                  message:
                    { type: string, example: "Email verification successful." }
                  data:
                    type: object
                    properties:
                      email: { type: string, example: "john@example.com" }
                      verified: { type: boolean, example: true }
        "400":
          description: Kode OTP salah atau sudah expired
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: false }
                  message: { type: string, example: "Invalid or expired OTP" }
                  errors:
                    {
                      type: object,
                      example: { otp: ["OTP salah atau sudah expired"] },
                    }
        "404":
          description: User tidak ditemukan
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: false }
                  message: { type: string, example: "User not found" }

  /api/resend-email-verification-otp:
    post:
      summary: Kirim Ulang OTP Verifikasi Email
      description: |
        Endpoint untuk mengirim ulang OTP ke email user yang belum diverifikasi.
        - Jika email belum terdaftar, akan ditolak.
        - Jika email sudah terverifikasi, akan ditolak.
        - Jika email belum terverifikasi, OTP baru akan dikirim ke email.
      tags: [Auth]
      parameters:
        - name: Accept-Language
          in: header
          required: false
          description: Pengaturan bahasa (en, id) dengan callback ke bahasa Inggris.
          schema:
            type: string
            example: en
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  description: Email user
                  example: john@example.com
              required: [email]
      responses:
        "200":
          description: OTP berhasil dikirim ulang ke email user
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: true }
                  message:
                    {
                      type: string,
                      example: "Resend email verification successfull.",
                    }
                  data:
                    type: object
                    properties:
                      email: { type: string, example: "john@example.com" }
        "400":
          description: Email sudah terverifikasi atau validasi gagal
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: false }
                  message:
                    { type: string, example: "Email sudah terverifikasi" }
                  errors:
                    {
                      type: object,
                      example: { email: ["Email sudah terverifikasi"] },
                    }
        "404":
          description: Email tidak ditemukan
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: false }
                  message: { type: string, example: "Email not found" }

  /api/send-reset-password-otp:
    post:
      summary: Kirim OTP untuk Reset Password
      description: |
        Endpoint untuk mengirim OTP ke email user yang ingin melakukan reset password.
      tags: [Auth]
      parameters:
        - name: Accept-Language
          in: header
          required: false
          description: Pengaturan bahasa (en, id) dengan callback ke bahasa Inggris.
          schema:
            type: string
            example: en
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  description: Email user
                  example: john@example.com
              required: [email]
      responses:
        "200":
          description: OTP berhasil dikirim ke email user
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: true }
                  message: { type: string, example: "OTP sent to email" }
        "404":
          description: Email tidak ditemukan
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: false }
                  message: { type: string, example: "Email not found" }

  /api/reset-password:
    post:
      summary: Reset Password dengan OTP
      description: |
        Endpoint untuk reset password menggunakan OTP yang dikirim ke email.
      tags: [Auth]
      parameters:
        - name: Accept-Language
          in: header
          required: false
          description: Pengaturan bahasa (en, id) dengan callback ke bahasa Inggris.
          schema:
            type: string
            example: en
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  description: Email user
                  example: john@example.com
                otp:
                  type: string
                  description: Kode OTP yang dikirim ke email
                  example: "1234"
                newPassword:
                  type: string
                  format: password
                  description: Password baru
                  example: "newpassword123"
                confirmNewPassword:
                  type: string
                  format: password
                  description: Konfirmasi password baru harus sama dengan password baru
                  example: "newpassword123"
              required: [email, otp, newPassword, confirmNewPassword]
      responses:
        "200":
          description: Password berhasil direset
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: true }
                  message:
                    { type: string, example: "Password reset successful" }
        "400":
          description: OTP salah/expired atau validasi gagal
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: false }
                  message: { type: string, example: "Invalid or expired OTP" }
                  errors:
                    {
                      type: object,
                      example: { otp: ["OTP salah atau sudah expired"] },
                    }
        "404":
          description: Email tidak ditemukan
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: false }
                  message: { type: string, example: "Email not found" }

  /api/users/login:
    post:
      summary: Login manual dengan email/username dan password
      description: |
        Endpoint untuk login manual menggunakan email atau username dan password. Jika berhasil, JWT dikembalikan.
      tags: [Auth]
      parameters:
        - name: Accept-Language
          in: header
          required: false
          description: Pengaturan bahasa (en, id) dengan callback ke bahasa Inggris.
          schema:
            type: string
            example: en
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                identifier:
                  type: string
                  description: Email address atau username
                  example: johndoe
                password:
                  type: string
                  format: password
                  description: Password user
                  example: password123
              required: [identifier, password]
      responses:
        "200":
          description: Login berhasil, JWT dikembalikan
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: true }
                  message: { type: string, example: "Login successful." }
                  data:
                    type: object
                    properties:
                      id: { type: integer, example: 1 }
                      fullname: { type: string, example: "John Doe" }
                      username: { type: string, example: "johndoe" }
                      email: { type: string, example: "john@example.com" }
                      profile_picture:
                        {
                          type: string,
                          example: "http://.../assets/profiles/johndoe.png",
                        }
                  token:
                    {
                      type: string,
                      example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
                    }
        "401":
          description: Kredensial salah
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: false }
                  message: { type: string, example: "Username or password wrong" }
        "403":
          description: Akun tidak aktif atau email belum diverifikasi
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: false }
                  message: { type: string, example: "Account is inactive" }

  /api/auth/google:
    get:
      summary: Redirect ke Google OAuth
      description: |
        Endpoint untuk memulai proses login/register dengan Google OAuth. User akan diarahkan ke halaman login Google.
      tags: [Auth]
      responses:
        "302":
          description: Redirect ke halaman login Google

  /api/auth/google/callback:
    get:
      summary: Callback dari Google OAuth
      description: |
        Endpoint callback setelah user login dengan Google. Jika sukses, user akan otomatis login/register dan menerima JWT.
        - Jika email sudah ada dan belum verifikasi, akun akan diaktifkan.
        - Jika email sudah ada dan sudah verifikasi, user langsung login.
        - Jika email belum ada, user baru akan dibuat.
      tags: [Auth]
      responses:
        "201":
          description: Register/login dengan Google berhasil, JWT dikembalikan
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: true }
                  message:
                    {
                      type: string,
                      example: "Authentication with Google successful",
                    }
                  data:
                    type: object
                    properties:
                      id: { type: integer, example: 1 }
                      fullname: { type: string, example: "John Doe" }
                      username: { type: string, example: "johndoe" }
                      email: { type: string, example: "john@example.com" }
                      profile_picture:
                        {
                          type: string,
                          example: "https://...",
                        }
                  token:
                    {
                      type: string,
                      example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
                    }
        "400":
          description: Validasi gagal atau error lain
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: false }
                  message:
                    { type: string, example: "Google authentication failed" }

  /api/auth/facebook:
    get:
      summary: Redirect ke Facebook OAuth
      description: |
        Endpoint untuk memulai proses login/register dengan Facebook OAuth. User akan diarahkan ke halaman login Facebook.
      tags: [Auth]
      responses:
        "302":
          description: Redirect ke halaman login Facebook

  /api/auth/facebook/callback:
    get:
      summary: Callback dari Facebook OAuth
      description: |
        Endpoint callback setelah user login dengan Facebook. Jika sukses, user akan otomatis login/register dan menerima JWT.
        - Jika email sudah ada dan belum verifikasi, akun akan diaktifkan.
        - Jika email sudah ada dan sudah verifikasi, user langsung login.
        - Jika email belum ada, user baru akan dibuat.
      tags: [Auth]
      responses:
        "201":
          description: Register/login dengan Facebook berhasil, JWT dikembalikan
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: true }
                  message:
                    {
                      type: string,
                      example: "Authentication with Facebook successful",
                    }
                  data:
                    type: object
                    properties:
                      id: { type: integer, example: 1 }
                      fullname: { type: string, example: "John Doe" }
                      username: { type: string, example: "johndoe" }
                      email: { type: string, example: "john@example.com" }
                      profile_picture:
                        {
                          type: string,
                          example: "https://",
                        }
                  token:
                    {
                      type: string,
                      example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
                    }
        "400":
          description: Validasi gagal atau error lain
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: false }
                  message:
                    { type: string, example: "Facebook authentication failed" }

  /api/auth/twitter:
    get:
      summary: Redirect ke Twitter OAuth
      description: |
        Endpoint untuk memulai proses login/register dengan Twitter OAuth. User akan diarahkan ke halaman login Twitter.
      tags: [Auth]
      responses:
        "302":
          description: Redirect ke halaman login Twitter

  /api/auth/twitter/callback:
    get:
      summary: Callback dari Twitter OAuth
      description: |
        Endpoint callback setelah user login dengan Twitter. Jika sukses, user akan otomatis login/register dan menerima JWT.
        - Jika email sudah ada dan belum verifikasi, akun akan diaktifkan.
        - Jika email sudah ada dan sudah verifikasi, user langsung login.
        - Jika email belum ada, user baru akan dibuat.
      tags: [Auth]
      responses:
        "201":
          description: Register/login dengan Twitter berhasil, JWT dikembalikan
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: true }
                  message:
                    {
                      type: string,
                      example: "Authentication with Twitter successful",
                    }
                  data:
                    type: object
                    properties:
                      id: { type: integer, example: 1 }
                      fullname: { type: string, example: "John Doe" }
                      username: { type: string, example: "johndoe" }
                      email: { type: string, example: "john@example.com" }
                      profile_picture:
                        {
                          type: string,
                          example: "https://...",
                        }
                  token:
                    {
                      type: string,
                      example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
                    }
        "400":
          description: Validasi gagal atau error lain
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: false }
                  message:
                    { type: string, example: "Twitter authentication failed" }

  /api/users/current:
    get:
      summary: Mendapatkan data user saat ini
      description: |
        Mengambil data profil user yang sedang login, termasuk relasi phones dan addresses.
      tags: [User]
      parameters:
        - name: Authorization
          in: header
          required: true
          description: Bearer token JWT
          schema:
            type: string
            example: "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        - name: Accept-Language
          in: header
          required: false
          description: Pengaturan bahasa (en, id) dengan callback ke bahasa Inggris.
          schema:
            type: string
            example: en
      responses:
        "200":
          description: Get current user successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: true }
                  message:
                    { type: string, example: "Get current user successful" }
                  data:
                    type: object
                    properties:
                      id: { type: integer, example: 1 }
                      fullname: { type: string, example: "John Doe" }
                      username: { type: string, example: "johndoe" }
                      email: { type: string, example: "john@example.com" }
                      is_email_verified: { type: boolean, example: true }
                      email_verified_at:
                        {
                          type: string,
                          format: date-time,
                          example: "2025-08-12T10:00:00Z",
                        }
                      profile_picture:
                        {
                          type: string,
                          example: "http://.../assets/profiles/johndoe.png",
                        }
                      is_active: { type: boolean, example: true }
                      phones:
                        type: array
                        items:
                          type: object
                          properties:
                            id: { type: integer, example: 1 }
                            number: { type: string, example: "08123456789" }
                      addresses:
                        type: array
                        items:
                          type: object
                          properties:
                            id: { type: integer, example: 1 }
                            address_name: { type: string, example: "Rumah" }
                            address:
                              { type: string, example: "Jl. Mawar No. 1" }
                            latitude: { type: number, example: -6.9 }
                            longitude: { type: number, example: 107.6 }
                            city: {type: string, example: "Unaaha"}
                            state: {type: string, example: "Sulawesi Tenggara"}
                            country: {type: string, example: "Indonesia"}
                            country_code: {type: string, example: "ID"}
                            zipcode: {type: string, example: "93418"}
                            created_at: {type: string, example: "2025-08-14T00:50:59.220Z"}
                            updated_at: {type: string, example: "2025-08-14T00:50:59.220Z"}
        "401":
          description: Unauthorized (token tidak valid/expired)
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Unauthorized. Need Authorization Token"
                  errors:
                    type: object
                    properties:
                      token:
                        type: string
                        example: null

    patch:
      summary: Update data profil user saat ini
      description: |
        Mengupdate data profil user (fullname, username, password). Hanya field yang dikirim yang diupdate.
        Untuk update password, wajib mengirim oldPassword, password baru, dan confirmPassword.
      tags: [User]
      parameters:
        - name: Authorization
          in: header
          required: true
          description: Bearer token JWT
          schema:
            type: string
            example: "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        - name: Accept-Language
          in: header
          required: false
          description: Pengaturan bahasa (en, id) dengan callback ke bahasa Inggris.
          schema:
            type: string
            example: en
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                fullname: { type: string, example: "John Doe" }
                username: { type: string, example: "johndoe" }
                oldPassword:
                  { type: string, format: password, example: "oldpassword123" }
                password:
                  { type: string, format: password, example: "newpassword123" }
                confirmPassword:
                  { type: string, format: password, example: "newpassword123" }
              description: Kirim hanya field yang ingin diupdate. Untuk update password, wajib oldPassword, password, confirmPassword.
      responses:
        "200":
          description: Update current user successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: true }
                  message:
                    { type: string, example: "Update current user successful" }
                  data:
                    type: object
                    example:
                      fullname: "John Doe"
                      username: "johndoe"
        "400":
          description: Validasi gagal atau old password salah
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: false }
                  message: { type: string, example: "Validation failed" }
                  errors:
                    {
                      type: object,
                      example: { oldPassword: ["Old password is incorrect"] },
                    }
        "401":
          description: Unauthorized (token tidak valid/expired)
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Unauthorized. Need Authorization Token"
                  errors:
                    type: object
                    properties:
                      token:
                        type: string
                        example: null

  /api/users/current/profile-picture:
    patch:
      summary: Upload foto profil user saat ini
      description: |
        Mengganti foto profil user yang sedang login. File gambar dikirim sebagai form-data dengan field profile_picture
      tags:
        - User
      parameters:
        - name: Authorization
          in: header
          required: true
          description: Bearer token JWT
          schema:
            type: string
            example: "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        - name: Accept-Language
          in: header
          required: false
          description: Pengaturan bahasa (en, id) dengan callback ke bahasa Inggris.
          schema:
            type: string
            example: en
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                profile_picture:
                  type: string
                  format: binary
      responses:
        "200":
          description: Foto profil berhasil diupdate
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Update profile picture successful"
                  data:
                    type: object
                    properties:
                      profile_picture:
                        type: string
                        example: "http://.../assets/profiles/user_1_1755334590343.jpg"
        "400":
          description: Validasi gagal atau file tidak ditemukan
          content:
            application/json:
              example:
                success: false
                message: "No file uploaded"
                errors: null
        "401":
          description: Unauthorized (token tidak valid/expired)
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Unauthorized. Need Authorization Token"
                  errors:
                    type: object
                    properties:
                      token:
                        type: string
                        example: null

  /api/users/current/addresses:
    get:
      summary: Mendapatkan daftar alamat user saat ini
      description: |
        Mengambil data alamat user yang sedang login
      tags:
        - Address
      parameters:
        - name: Authorization
          in: header
          required: true
          description: Bearer token JWT
          schema:
            type: string
            example: "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        - name: Accept-Language
          in: header
          required: false
          description: Pengaturan bahasa (en, id) dengan callback ke bahasa Inggris.
          schema:
            type: string
            example: en
      responses:
        "200":
          description: "Berhasil mendapatkan daftar alamat pengguna saat ini"
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Berhasil mendapatkan daftar alamat pengguna saat ini"
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                        address_name:
                          type: string
                          example: "Rumah Utama"
                        address:
                          type: string
                          example: "Jl. Diponegoro No. 1, Bandung, Jawa Barat, Indonesia"
                        latitude:
                          type: number
                          example: -6.90389
                        longitude:
                          type: number
                          example: 107.61861
                        city:
                          type: string
                          example: "Bandung"
                        state:
                          type: string
                          example: "Jawa Barat"
                        country:
                          type: string
                          example: "Indonesia"
                        country_code:
                          type: string
                          example: "ID"
                        zipcode:
                          type: string
                          example: "40115"
        "401":
          description: Unauthorized (token tidak valid/expired)
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Unauthorized. Need Authorization Token"
                  errors:
                    type: object
                    properties:
                      token:
                        type: string
                        example: null
        "404":
          description: Address tidak ditemukan
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: false }
                  message: { type: string, example: "Address not found" }

    post:
      summary: Tambah alamat baru untuk user saat ini
      description: |
        Endpoint untuk menambah alamat baru milik user yang sedang login. 
        Sistem akan otomatis melakukan geocoding untuk mendapatkan latitude, longitude, dan detail lokasi dari field `address` yang diberikan.
      tags:
        - Address
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
          description: JWT token (Bearer)
        - name: Accept-Language
          in: header
          required: false
          schema:
            type: string
          description: Bahasa response (en/id)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                addressName:
                  type: string
                  maxLength: 255
                  example: "Rumah Utama"
                address:
                  type: string
                  maxLength: 255
                  example: "Jl. Diponegoro No. 1, Bandung"
              required:
                - address
      responses:
        "201":
          description: Alamat berhasil dibuat
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Create address successful."
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      address_name:
                        type: string
                        example: "Rumah Utama"
                      address:
                        type: string
                        example: "Jl. Diponegoro No. 1, Bandung, Jawa Barat, Indonesia"
                      latitude:
                        type: number
                        example: -6.90389
                      longitude:
                        type: number
                        example: 107.61861
                      city:
                        type: string
                        example: "Bandung"
                      state:
                        type: string
                        example: "Jawa Barat"
                      country:
                        type: string
                        example: "Indonesia"
                      country_code:
                        type: string
                        example: "ID"
                      zipcode:
                        type: string
                        example: "40115"
        "400":
          description: Validasi gagal atau geocoding gagal
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Validation failed"
                  errors:
                    type: object
                    example: { "address": ["Field address is required"] }
        "401":
          description: Unauthorized (token tidak valid/expired)
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Unauthorized. Need Authorization Token"
                  errors:
                    type: object
                    properties:
                      token:
                        type: string
                        example: null

  /api/users/current/addresses/{addressId}:
    get:
      summary: Mendapatkan data alamat user saat ini berdasarkan address Id
      description: |
        Mengambil data alamat user yang sedang login
      tags:
        - Address
      parameters:
        - name: Authorization
          in: header
          required: true
          description: Bearer token JWT
          schema:
            type: string
            example: "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        - name: Accept-Language
          in: header
          required: false
          description: Pengaturan bahasa (en, id) dengan callback ke bahasa Inggris.
          schema:
            type: string
            example: en
        - name: addressId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: "Berhasil mendapatkan data alamat pengguna saat ini berdasarkan address Id"
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Berhasil mendapatkan alamat pengguna saat ini berdasarkan ID
                  data:
                    type: object
                    properties:
                      id: { type: integer, example: 1 }
                      address_name: { type: string, example: "Rumah" }
                      address: { type: string, example: "Jl. Mawar No. 1, Unaaha, ..." }
                      latitude: { type: number, example: -6.9 }
                      longitude: { type: number, example: 107.6 }
                      city: {type: string, example: "Unaaha"}
                      state: {type: string, example: "Sulawesi Tenggara"}
                      country: {type: string, example: "Indonesia"}
                      country_code: {type: string, example: "ID"}
                      zipcode: {type: string, example: "93418"}
        "401":
          description: Unauthorized (token tidak valid/expired)
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Unauthorized. Need Authorization Token"
                  errors:
                    type: object
                    properties:
                      token:
                        type: string
                        example: null
        "404":
          description: Address tidak ditemukan
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: false }
                  message: { type: string, example: "Address not found" }
    
    patch:
      summary: Update alamat user saat ini
      description: |
        Mengupdate alamat milik user yang sedang login.
      tags: [Address]
      parameters:
        - name: Authorization
          in: header
          required: true
          description: Bearer token JWT
          schema:
            type: string
            example: "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        - name: Accept-Language
          in: header
          required: false
          description: Pengaturan bahasa (en, id) dengan callback ke bahasa Inggris.
          schema:
            type: string
            example: en
        - name: addressId
          in: path
          required: true
          schema:
            type: integer
          description: ID address yang akan diupdate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                addressName: { type: string, example: "Rumah" }
                address: { type: string, example: "Jl. Mawar No. 1" }
              description: Kirim field yang ingin diupdate. Latitude dan longitude belum otomatis, akan diupdate menggunakan library geocoding di masa depan.
      responses:
        "200":
          description: Update address successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Berhasil memperbarui alamat pengguna saat ini.
                  data:
                    type: object
                    properties:
                      id: { type: integer, example: 1 }
                      address_name: { type: string, example: "Rumah" }
                      address: { type: string, example: "Jl. Mawar No. 1, Unaaha, ..." }
                      latitude: { type: number, example: -6.9 }
                      longitude: { type: number, example: 107.6 }
                      city: {type: string, example: "Unaaha"}
                      state: {type: string, example: "Sulawesi Tenggara"}
                      country: {type: string, example: "Indonesia"}
                      country_code: {type: string, example: "ID"}
                      zipcode: {type: string, example: "93418"}
        "400":
          description: Validasi gagal
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: false }
                  message: { type: string, example: "Validation failed" }
                  errors:
                    {
                      type: object,
                      example: { address: ["Address tidak valid"] },
                    }
        "401":
          description: Unauthorized (token tidak valid/expired)
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Unauthorized. Need Authorization Token"
                  errors:
                    type: object
                    properties:
                      token:
                        type: string
                        example: null
        "404":
          description: Address tidak ditemukan
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: false }
                  message: { type: string, example: "Address not found" }

    delete:
      summary: Menghapus address user saat ini
      description: |
        Menghapus address user yang sedang login saat ini menggunakan request parameter addressId
      tags:
        - Address
      parameters:
        - name: Authorization
          in: header
          required: true
          description: Bearer token JWT
          schema:
            type: string
            example: "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        - name: Accept-Language
          in: header
          required: false
          description: Pengaturan bahasa (en, id) dengan callback ke bahasa Inggris.
          schema:
            type: string
            example: en
        - name: addressId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Berhasil menghapus alamat user
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Berhasil menghapus alamat pengguna berdasarkan ID
                  data: 
                    type: object
                    properties:
                      id: { type: integer, example: 1 }
                      address_name: { type: string, example: "Rumah" }
                      address: { type: string, example: "Jl. Mawar No. 1, Unaaha, ...." }
                      latitude: { type: number, example: -6.9 }
                      longitude: { type: number, example: 107.6 }
                      city: {type: string, example: "Unaaha"}
                      state: {type: string, example: "Sulawesi Tenggara"}
                      country: {type: string, example: "Indonesia"}
                      country_code: {type: string, example: "ID"}
                      zipcode: {type: string, example: "93418"}
        "401":
          description: Unauthorized (token tidak valid/expired)
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Unauthorized. Need Authorization Token"
                  errors:
                    type: object
                    properties:
                      token:
                        type: string
                        example: null
        "404":
          description: Address tidak ditemukan
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: false }
                  message: { type: string, example: "Address not found" }

  /api/users/current/phones:
    get:
      summary: Mendapatkan daftar nomor kontak user saat ini
      description: |
        Mengambil seluruh daftar nomor kontak (phone) milik user yang sedang login.
        - Hanya dapat diakses oleh user yang sudah login (dengan Authorization token).
      tags: [Phone]
      parameters:
        - name: Authorization
          in: header
          required: true
          description: Bearer token JWT
          schema:
            type: string
            example: "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        - name: Accept-Language
          in: header
          required: false
          description: Pengaturan bahasa (en, id) dengan callback ke bahasa Inggris.
          schema:
            type: string
            example: en
      responses:
        "200":
          description: Daftar nomor kontak user berhasil diambil
          content:
            application/json:
              example:
                success: true
                message: Berhasil mendapatkan daftar nomor telepon.
                data:
                  - id: 1
                    number: "08123456789"
                    user_id: 1
                  - id: 2
                    number: "08987654321"
                    user_id: 1
        "401":
          description: Unauthorized (token tidak valid/expired)
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Unauthorized. Need Authorization Token"
                  errors:
                    type: object
                    properties:
                      token:
                        type: string
                        example: null
        "404":
          description: Address tidak ditemukan
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: false }
                  message: { type: string, example: "Address not found" }

    post:
      summary: Tambah nomor kontak baru untuk user saat ini
      description: |
        Menambahkan nomor kontak (phone) baru untuk user yang sedang login.
        - Nomor telepon tidak boleh duplikat untuk user yang sama.
      tags: [Phone]
      parameters:
        - name: Authorization
          in: header
          required: true
          description: Bearer token JWT
          schema:
            type: string
            example: "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        - name: Accept-Language
          in: header
          required: false
          description: Pengaturan bahasa (en, id) dengan callback ke bahasa Inggris.
          schema:
            type: string
            example: en
      requestBody:
        required: true
        content:
          application/json:
            example:
              number: "08123456789"
      responses:
        "201":
          description: Nomor kontak berhasil ditambahkan
          content:
            application/json:
              example:
                success: true
                message: Berhasil membuat nomor telepon.
                data:
                  id: 3
                  number: "08123456789"
                  user_id: 1
        "400":
          description: Validasi gagal atau nomor telepon sudah ada
          content:
            application/json:
              examples:
                validasi:
                  value:
                    success: false
                    message: Validasi gagal
                    errors:
                      number: "Field number wajib diisi"
                duplikat:
                  value:
                    success: false
                    message: Nomor telepon sudah ditambahkan
                    errors: null
        "401":
          description: Unauthorized (token tidak valid/expired)
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Unauthorized. Need Authorization Token"
                  errors:
                    type: object
                    properties:
                      token:
                        type: string
                        example: null

  /api/users/current/phones/{phoneId}:
    get:
      summary: Mendapatkan detail nomor kontak user saat ini berdasarkan phoneId
      description: |
        Mengambil detail nomor kontak (phone) milik user yang sedang login berdasarkan ID.
      tags: [Phone]
      parameters:
        - name: Authorization
          in: header
          required: true
          description: Bearer token JWT
          schema:
            type: string
            example: "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        - name: Accept-Language
          in: header
          required: false
          description: Pengaturan bahasa (en, id) dengan callback ke bahasa Inggris.
          schema:
            type: string
            example: en
        - name: phoneId
          in: path
          required: true
          schema:
            type: integer
          description: ID phone yang akan diambil
      responses:
        "200":
          description: Detail nomor kontak ditemukan
          content:
            application/json:
              example:
                success: true
                message: Berhasil mendapatkan detail nomor telepon.
                data:
                  id: 1
                  number: "08123456789"
                  user_id: 1
        "400":
          description: phoneId bukan angka
          content:
            application/json:
              example:
                success: false
                message: phone id bukan angka
                errors: null
        "401":
          description: Unauthorized (token tidak valid/expired)
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Unauthorized. Need Authorization Token"
                  errors:
                    type: object
                    properties:
                      token:
                        type: string
                        example: null
        "404":
          description: Nomor kontak tidak ditemukan
          content:
            application/json:
              example:
                success: false
                message: Nomor telepon tidak ditemukan
                errors: null
    
    patch:
      summary: Update nomor kontak user saat ini
      description: |
        Mengupdate nomor kontak milik user yang sedang login.
      tags: [Phone]
      parameters:
        - name: Authorization
          in: header
          required: true
          description: Bearer token JWT
          schema:
            type: string
            example: "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        - name: Accept-Language
          in: header
          required: false
          description: Pengaturan bahasa (en, id) dengan callback ke bahasa Inggris.
          schema:
            type: string
            example: en
        - name: phoneId
          in: path
          required: true
          schema:
            type: integer
          description: ID phone yang akan diupdate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                number: { type: string, example: "08123456789" }
              description: Kirim field yang ingin diupdate.
      responses:
        "200":
          description: Update phone successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: true }
                  message:
                    {
                      type: string,
                      example: "Update phone for current user successful",
                    }
                  data:
                    type: object
                    example:
                      number: "08123456789"
        "400":
          description: Validasi gagal
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: false }
                  message: { type: string, example: "Validation failed" }
                  errors:
                    { type: object, example: { number: ["Nomor tidak valid"] } }
        "401":
          description: Unauthorized (token tidak valid/expired)
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Unauthorized. Need Authorization Token"
                  errors:
                    type: object
                    properties:
                      token:
                        type: string
                        example: null
        "404":
          description: Phone tidak ditemukan
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: false }
                  message: { type: string, example: "Phone not found" }
          application/json:
            schema:
              type: object
              properties:
                success:
                  type: boolean
                message:
                  type: string
                data:
                  type: object
                  properties:
                    email:
                      type: string

    delete:
      summary: Menghapus nomor kontak user saat ini
      description: |
        Menghapus nomor kontak (phone) milik user yang sedang login berdasarkan ID.
      tags: [Phone]
      parameters:
        - name: Authorization
          in: header
          required: true
          description: Bearer token JWT
          schema:
            type: string
            example: "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        - name: Accept-Language
          in: header
          required: false
          description: Pengaturan bahasa (en, id) dengan callback ke bahasa Inggris.
          schema:
            type: string
            example: en
        - name: phoneId
          in: path
          required: true
          schema:
            type: integer
          description: ID phone yang akan dihapus
      responses:
        "200":
          description: Nomor kontak berhasil dihapus
          content:
            application/json:
              example:
                success: true
                message: Berhasil menghapus nomor telepon.
                data:
                  id: 1
                  number: "08123456789"
                  user_id: 1
        "400":
          description: phoneId bukan angka
          content:
            application/json:
              example:
                success: false
                message: phone id bukan angka
                errors: null
        "401":
          description: Unauthorized (token tidak valid/expired)
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Unauthorized. Need Authorization Token"
                  errors:
                    type: object
                    properties:
                      token:
                        type: string
                        example: null
        "404":
          description: Nomor kontak tidak ditemukan
          content:
            application/json:
              example:
                success: false
                message: Nomor telepon tidak ditemukan
                errors: null

  /api/categories:
    get:
      deprecated: false

  /api/donations:
    post:
      deprecated: false
















