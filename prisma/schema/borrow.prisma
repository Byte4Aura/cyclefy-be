enum BorrowStatus {
    waiting_for_request
    waiting_for_confirmation
    confirmed
    lent
    returned
    overdue
    completed
    cancelled
}

// BORROW
model Borrow {
    id            Int      @id @default(autoincrement())
    user          User     @relation(fields: [user_id], references: [id])
    user_id       Int
    item_name     String   @db.VarChar(255)
    description   String   @db.Text
    address       Address  @relation(fields: [address_id], references: [id])
    address_id    Int
    category      Category @relation(fields: [category_id], references: [id])
    category_id   Int
    phone         Phone    @relation(fields: [phone_id], references: [id])
    phone_id      Int
    duration_from DateTime
    duration_to   DateTime
    // status        BorrowStatus @default(posted)
    // status_detail String       @db.VarChar(255)
    created_at    DateTime @default(now())
    updated_at    DateTime @updatedAt

    images                BorrowImage[]
    applications          BorrowApplication[]
    borrowStatusHistories BorrowStatusHistory[]

    @@map("borrows")
}

model BorrowStatusHistory {
    id            Int          @id @default(autoincrement())
    borrow        Borrow       @relation(fields: [borrow_id], references: [id])
    borrow_id     Int
    status        BorrowStatus @default(waiting_for_request)
    status_detail String       @db.VarChar(255)
    created_at    DateTime     @default(now())
    updated_at    DateTime     @updatedAt
    updated       User?        @relation(fields: [updated_by], references: [id])
    updated_by    Int?

    @@map("borrow_status_histories")
}

// BORROW_IMAGES
model BorrowImage {
    id         String   @id @default(uuid()) @db.VarChar(255)
    borrow     Borrow   @relation(fields: [borrow_id], references: [id])
    borrow_id  Int
    image_path String   @db.VarChar(255)
    image_name String   @db.VarChar(255)
    image_size Int
    created_at DateTime @default(now())

    @@map("borrow_images")
}

enum BorrowApplicationStatus {
    request_submitted
    confirmed
    borrowed
    returned
    overdue
    completed
    cancelled
}

// BORROW_APPLICATIONS
model BorrowApplication {
    id             Int      @id @default(autoincrement())
    borrow         Borrow   @relation(fields: [borrow_id], references: [id])
    borrow_id      Int
    user           User     @relation(fields: [user_id], references: [id])
    user_id        Int
    reason         String   @db.Text
    address        Address  @relation(fields: [address_id], references: [id])
    address_id     Int
    phone          Phone    @relation(fields: [phone_id], references: [id])
    phone_id       Int
    duration_from  DateTime
    duration_to    DateTime
    // status        BorrowApplicationStatus @default(request_submitted)
    // status_detail String                  @db.VarChar(255)
    decline_reason String?  @db.VarChar(255)
    created_at     DateTime @default(now())
    updated_at     DateTime @updatedAt

    borrowApplicationStatusHistories BorrowApplicationStatusHistory[]

    @@map("borrow_applications")
}

model BorrowApplicationStatusHistory {
    id                    Int                     @id @default(autoincrement())
    borrow_application    BorrowApplication       @relation(fields: [borrow_application_id], references: [id])
    borrow_application_id Int
    status                BorrowApplicationStatus @default(request_submitted)
    status_detail         String                  @db.VarChar(255)
    created_at            DateTime                @default(now())
    updated_at            DateTime                @updatedAt
    updated               User?                   @relation(fields: [updated_by], references: [id])
    updated_by            Int?

    @@map("borrow_application_status_histories")
}
